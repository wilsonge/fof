<?xml version="1.0" encoding="UTF-8"?>
<book version="5.0" xmlns="http://docbook.org/ns/docbook"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:xi="http://www.w3.org/2001/XInclude"
      xmlns:svg="http://www.w3.org/2000/svg"
      xmlns:m="http://www.w3.org/1998/Math/MathML"
      xmlns:html="http://www.w3.org/1999/xhtml"
      xmlns:db="http://docbook.org/ns/docbook">
  <info>
    <title>FOF Developer's Guide</title>

    <subtitle>The compact reference to Joomla!'s Rapid Application Development
    framework</subtitle>

    <author>
      <personname><firstname>Nicholas</firstname><surname>Dionysopoulos</surname></personname>

      <affiliation>
        <orgname>Akeeba Ltd</orgname>
      </affiliation>
    </author>

    <pubdate>July 2013</pubdate>

    <revhistory>
      <revision>
        <date>July 2013</date>

        <authorinitials>NKD</authorinitials>

        <revremark>First release</revremark>
      </revision>
    </revhistory>

    <copyright>
      <year>2013</year>

      <holder>Akeeba Ltd</holder>
    </copyright>

    <legalnotice>
      <para>The contents of this documentation are subject to copyright law
      and are made available under the <link
      xlink:href="http://docs.joomla.org/JEDL">Joomla! Electronic
      Documentation License (JEDL)</link> unless otherwise stated. You may
      find the <link xlink:href="http://docs.joomla.org/JEDL/FAQ">JEDL
      Frequently Asked Questions</link> useful in determining if your proposed
      use of this material is allowed. If you have any questions regarding
      licensing of this material please contact <link
      xlink:href="mailto:legal@opensourcematters.org">legal@opensourcematters.org</link>.
      If you wish to report a possible violation of the license terms for the
      material on this site then please contact <link
      xlink:href="mailto:legal@opensourcematters.org">legal@opensourcematters.org</link>.</para>
    </legalnotice>
  </info>

  <chapter xml:id="introducing-fof">
    <title>Introducing FOF</title>

    <section xml:id="introduction">
      <title>Introduction</title>

      <section xml:id="what-is-fof">
        <title>What is FOF</title>

        <para>FOF (Framework on Framework) is a rapid application development
        framework for Joomla!. Unlike other frameworks it is not standalone.
        It extends the Joomla! Platform instead of replacing it, featuring its
        own forked and extended version of the MVC classes, keeping a strong
        semblance to the existing Joomla! MVC API. This means that you don't
        have to relearn writing Joomla! extensions. Instead, you can start
        being productive from the first day you're using it. Our goal is to
        always support the officially supported LTS versions of Joomla! and
        not break backwards compatibility without a clear deprecation and
        migration path.</para>

        <para>FOF is compatible with the database technologies used by Joomla!
        itself: MySQL, SQL Server (and Windows Azure SQL), PostgreSQL. In most
        cases you can write a component in one database server technology and
        have it run on the other database server technologies with minimal or
        no effort.</para>

        <para>FOF is currently used by free and commercial components for
        Joomla! by an increasing number of developers.</para>
      </section>

      <section xml:id="free-software-means-collaboration">
        <title>Free Software means collaboration</title>

        <para>The reason of existence of FOSS (Free and Open Source Software)
        is collaboration between developers. FOF is no exception; it exists
        because and for the community of Joomla! developers. It is provided
        free of charge and with all of the freedoms of the GPL for you to
        benefit. And in true Free Software spirit, the community aspect is
        very strong. Participating is easy and fun.</para>

        <para>If you want to discuss FOF there is a <link
        xlink:href="https://groups.google.com/forum/?hl=en&amp;fromgroups#!forum/frameworkonframework">Google
        Groups mailing list</link>. This is a peer discussion group where
        developers working with FOF can freely discuss.</para>

        <para>If you have a feature proposal or have found a bug, but you're
        not sure how to code it yourself, please report it on the list.</para>

        <para>If you have a patch feel free to fork this <link
        xlink:href="https://github.com/akeeba/fof">project on GitHub</link>
        (you only need a free account to do that) and send a pull request.
        Please remember to describe what you intended to achieve to help me
        review your code faster.</para>

        <para>If you've found a cool hack (in the benign sense of the word,
        not the malicious one...), something missing from the documentation or
        have a tip which can help other developers feel free to edit the Wiki.
        We're all grown-ups and professionals, I believe there is no need of
        policing the wiki edits. If you're unsure about whether a wiki edit is
        appropriate, please ask on the list.</para>
      </section>

      <section xml:id="preface-to-doc">
        <title>Preface to this documentation</title>

        <para>FOF is a rapid application development framework for the Joomla!
        CMS. Instead of trying to completely replace Joomla!’s own API
        (formerly known as the Joomla! Platform) it builds upon it and extends
        it both in scope and features. In the end of the day it enables
        agony-free extension development for the Joomla! CMS.</para>

        <para>In order to exploit the time-saving capabilities of the FOF
        framework to the maximum you need to understand how it's organized,
        the conventions used and how its different pieces work together. This
        documentation attempts to provide you with this knowledge.</para>

        <para>As with every piece of documentation we had to answer two big
        questions: where do we start and how do we structure the content. The
        first question was easy to answer. Having given the presentation of
        the FOF framework countless times we have developed an intuitive grasp
        of how to start presenting it: from the abstract to the
        concrete.</para>

        <para>The second question was harder to answer. Do we write a dry
        reference to the framework or more of a story-telling documentation
        which builds up its reader’s knowledge? Since we are all developers we
        can read the code (and DocBlocks), meaning that the first option is
        redundant. Therefore we decided to go for the second option.</para>

        <para>As a result this documentation does not attempt to be a complete
        reference, a development gospel, the one and only source of
        information on FOF. On the contrary, this documentation aims to be the
        beginning of your journey, much like a travel guide. What matters the
        most is the journey itself, writing your own extensions based on FOF.
        As you go on writing software you will be full of questions. Most of
        them you’ll answer yourself. Some of them will be already answered in
        the wiki. A few of them you’ll have to ask on the mailing list. In the
        end of the day you will be richer in knowledge. If you do dig up a
        golden nugget of knowledge, please do consider writing a wiki page.
        This way we’ll all be richer and enjoy our coding trip even
        more.</para>

        <para>Have fun and code on!</para>
      </section>
    </section>

    <section xml:id="getting-started-with-fof">
      <title>Getting started with FOF</title>

      <section xml:id="download-and-install">
        <title>Download and install FOF</title>

        <para>You can download FOF as an installable Joomla! library package
        from <link
        xlink:href="https://www.akeebabackup.com/download/fof.html">our
        repository</link>. You can install it like any other extension under
        Joomla! 2.x and later.</para>

        <bridgehead>Using the latest development version</bridgehead>

        <para>You can clone a read-only copy of the Git repository of FOF in
        your local machine. Make sure you symlink or copy the fof directory to
        your dev site's libraries/fof directory. Alternatively, we publish dev
        releases in the <link
        xlink:href="https://www.akeebabackup.com/download/fof-dev.html">dev
        release repository</link>. These are installable packages but please
        note that they may be out of date compared to the Git HEAD. Dev
        releases are not published automatically and may be several revisions
        behind the current Git master branch.</para>
      </section>

      <section xml:id="using-in-your-extension">
        <title>Using it in your extension</title>

        <para>The recommended method for including FOF in your component,
        module or plugin is using this short code snippet right after your
        defined('_JEXEC') or die() statement (Joomla! 2.x and later):</para>

        <programlisting>if (!defined('FOF_INCLUDED'))
{
    include_once JPATH_LIBRARIES . '/fof/include.php';
}</programlisting>

        <para>Alternatively, you can use the one-liner:</para>

        <programlisting>require_once JPATH_LIBRARIES . '/fof/include.php';
</programlisting>

        <para>From that point onwards you can use FOF in your
        extension.</para>
      </section>

      <section xml:id="install-fof-with-your-component">
        <title>Installing FOF with your component</title>

        <important>
          <para>Joomla! 3.2 will ship with FOF pre-installed. Developers must
          make sure that they do not accidentally overwrite the FOF library
          shipped with Joomla!. You can do that with an
          if(version_compare(JVERSION, '3.2.0', 'ge')) return; in your FOF
          installation code.</para>
        </important>

        <para>Unfortunately, Joomla! doesn't allow us to version checking
        before installing a library package. This means that it's your
        responsibility to check that there is no newer version of FOF
        installed in the user's site before attempting to install FOF with
        your extension. In the following paragraphs we are going to
        demonstrate one way to do that for Joomla! 2.x / 3.x component
        packages.</para>

        <para>Include a directory called fof in your installation package. The
        directory should contain the files of the installation package's fof
        directory. Then, in your script.mycomponent.php file add the following
        method:</para>

        <programlisting>/**
 * Check if FoF is already installed and install if not
 *
 * @param   object  $parent  class calling this method
 *
 * @return  array            Array with performed actions summary
 */
private function _installFOF($parent)
{
    $src = $parent-&gt;getParent()-&gt;getPath('source');

    // Load dependencies
    JLoader::import('joomla.filesystem.file');
    JLoader::import('joomla.utilities.date');
    $source = $src . '/fof';

    if (!defined('JPATH_LIBRARIES'))
    {
        $target = JPATH_ROOT . '/libraries/fof';
    }
    else
    {
        $target = JPATH_LIBRARIES . '/fof';
    }
    $haveToInstallFOF = false;

    if (!is_dir($target))
    {
        $haveToInstallFOF = true;
    }
    else
    {
        $fofVersion = array();

        if (file_exists($target . '/version.txt'))
        {
            $rawData = JFile::read($target . '/version.txt');
            $info    = explode("\n", $rawData);
            $fofVersion['installed'] = array(
                'version'   =&gt; trim($info[0]),
                'date'      =&gt; new JDate(trim($info[1]))
            );
        }
        else
        {
            $fofVersion['installed'] = array(
                'version'   =&gt; '0.0',
                'date'      =&gt; new JDate('2011-01-01')
            );
        }

        $rawData = JFile::read($source . '/version.txt');
        $info    = explode("\n", $rawData);
        $fofVersion['package'] = array(
            'version'   =&gt; trim($info[0]),
            'date'      =&gt; new JDate(trim($info[1]))
        );

        $haveToInstallFOF = $fofVersion['package']['date']-&gt;toUNIX() &gt; $fofVersion['installed']['date']-&gt;toUNIX();
    }

    $installedFOF = false;

    if ($haveToInstallFOF)
    {
        $versionSource = 'package';
        $installer = new JInstaller;
        $installedFOF = $installer-&gt;install($source);
    }
    else
    {
        $versionSource = 'installed';
    }

    if (!isset($fofVersion))
    {
        $fofVersion = array();

        if (file_exists($target . '/version.txt'))
        {
            $rawData = JFile::read($target . '/version.txt');
            $info    = explode("\n", $rawData);
            $fofVersion['installed'] = array(
                'version'   =&gt; trim($info[0]),
                'date'      =&gt; new JDate(trim($info[1]))
            );
        }
        else
        {
            $fofVersion['installed'] = array(
                'version'   =&gt; '0.0',
                'date'      =&gt; new JDate('2011-01-01')
            );
        }

        $rawData = JFile::read($source . '/version.txt');
        $info    = explode("\n", $rawData);
        $fofVersion['package'] = array(
            'version'   =&gt; trim($info[0]),
            'date'      =&gt; new JDate(trim($info[1]))
        );
        $versionSource = 'installed';
    }

    if (!($fofVersion[$versionSource]['date'] instanceof JDate))
    {
        $fofVersion[$versionSource]['date'] = new JDate;
    }

    return array(
        'required'  =&gt; $haveToInstallFOF,
        'installed' =&gt; $installedFOF,
        'version'   =&gt; $fofVersion[$versionSource]['version'],
        'date'      =&gt; $fofVersion[$versionSource]['date']-&gt;format('Y-m-d'),
    );
}
</programlisting>

        <para>You need to call it from inside your postflight() method. For
        example:</para>

        <programlisting>/**
 * Method to run after an install/update/uninstall method
 *
 * @param   object  $type    type of change (install, update or discover_install)
 * @param   object  $parent  class calling this method
 *
 * @return void
 */
function postflight($type, $parent)
{
        $fofInstallationStatus = $this-&gt;_installFOF($parent);
}
</programlisting>

        <warning>
          <para>Due to a bug/feature in Joomla! 1.6 and later, your
          component's manifest file must start with a letter before L,
          otherwise Joomla! will assume that lib_fof.xml is your extension's
          XML manifest and install FOF instead of your extension. We suggest
          using the com_yourComponentName.xml convention, e.g. com_todo.xml.
          There is a patch pending in Joomla!'s tracker for this issue,
          hopefully it will be accepted sometime soon.</para>
        </warning>
      </section>

      <section xml:id="sample-apps">
        <title>Sample applications</title>

        <para>FOF comes with two sample applications which are used to
        demonstrate its features, <link
        xlink:href="https://github.com/akeeba/todo-fof-example">To-Do</link>
        and <link xlink:href="https://github.com/akeeba/contactus">Contact
        Us</link>. These were conceived and developed in different points of
        FOF's development. As a result they are always in a state of flux and
        will definitely not expose all of FOF's features.</para>

        <para>Another good way to learn some FOF tricks is by reading the
        source code of existing FOF-based components. Just remember that we
        are all real world developers and sometimes our code is anything but
        academically correct ;)</para>
      </section>
    </section>

    <section xml:id="key-features">
      <title>Key Features</title>

      <para>Some of the key features / highlights of FOF:</para>

      <bridgehead>Convention over configuration, Rails style.</bridgehead>

      <para>Instead of having to painstakingly code every single bit of your
      component, it's sufficient to use our naming conventions, inspired by
      Ruby on Rails conventions. For example, if you have com_example, the
      foobar view will read from the #__example_foobars table which has a
      unique key named example_foobar_id. The default implementation of
      controllers, models, tables and views will also cater for the majority
      of use cases, minimising the code you'll need to write.</para>

      <bridgehead>HMVC today, without relearning component
      development.</bridgehead>

      <para>There's a lot of talk about the need to re-engineer the MVC
      classes in Joomla! to support HMVC. What if we could give you HMVC
      support using the existing MVC classes, today, without having to relearn
      how to write components? Yes, it's possible with FOF. It has been
      possible since September 2011, actually. And for those who mumble their
      words and spread FUD, yes, it IS HMVC by any definition. The very
      existence of the FOFDispatcher class proves the point.</para>

      <bridgehead>Easy reuse of view template files without ugly
      include().</bridgehead>

      <para>More often than not you want to reuse view template files across
      views. The "traditional" way was by using include() or require()
      statements. This meant, however, that template overrides ceased working.
      Not any more! Using FOFView's loadAnyTemplate() you can load any view
      template file from the front- or back-end of your component or any other
      component, automatically respecting template overrides.</para>

      <bridgehead>Automatic language loading and easy overrides.</bridgehead>

      <para>Are you sick and tired of having to load your component's language
      files manually? Do you end up with a lot of untranslated strings when
      your translators don't catch up with your new features? Yes, that sucks.
      It's easy to overcome. FOF will automatically handle language loading
      for you.</para>

      <bridgehead>Media files override (works like template
      overrides).</bridgehead>

      <para>So far you knew that you can override Joomla!'s view template
      files using template overrides. But what about CSS or Javascript files?
      This usually required the users to "hack core", i.e. modify your views'
      PHP files, ending up in an unmaintainable, non-upgradeable and
      potentially insecure solution. Not any more! Using FOF's
      FOFTemplateUtils::addCSS and FOFTemplateUtils::addJS you can load your
      CSS and JS files directly from the view template file. Even better? You
      can use the equivalent of template overrides to let your users and
      template designers override them with their own implementations. They
      just have to create the directory
      templates/your_template/media/com_example to override the files normally
      found in media/com_example. So easy!</para>

      <bridgehead>Automatic JSON and CSV views with no extra code (also useful
      for web services).</bridgehead>

      <para>Why struggle to provide a remote API for your component? FOF makes
      the data of each view accessible as JSON feeds opening a new world of
      possibilities for Joomla! components (reuse data in mobile apps,
      Metro-style Windows 8 tiles, browser extensions, mash-up web
      applications, ...). The automatic CSV views work on the same principle
      but output data in CSV format, suitable for painlessly data importing to
      spreadsheets for further processing. Oh, did we mention that we already
      have an almost RESTful web services implementation?</para>

      <bridgehead>No code view templates.</bridgehead>

      <para>Don't you hate it that you have to write a different view template
      (in PHP and HTML) for each Joomla! version and, worse, each template out
      there? Don't you hate it having to teach non-developers how to not screw
      up your component with every update you publish? We feel your pain.
      That's why FOF supports the use of XML files as view templates,
      rendering them automatically to HTML. Not just forms; everything,
      including browse (multiple items) and single item views. Even better,
      you get to choose if you want to use traditional PHP/HTML view
      templates, XML view templates or a combination of both, even in the same
      view!</para>

      <bridgehead>No code routing, ACL and overall application
      configuration.</bridgehead>

      <para>Since FOF 2.1 you can define your application's routing, access
      control integration and overall configuration without routing any code,
      just by using a simple to understand XML file. It's now easier than ever
      to have Joomla! extensions with truly minimal (or no) PHP code.</para>
    </section>
  </chapter>

  <chapter xml:id="component-overview-and-reference">
    <title>Component overview and reference</title>

    <para>FOF is an MVC framework in heart and soul. It tries to stick as
    close as possible to the MVC conventions put forward by the Joomla! CMS
    since Joomla! 1.5, cutting down on unnecessary code duplication. The main
    premise is that your code will be DRY – not as the opposite of “wet”, but
    as in Don’t Repeat Yourself. Simply put: if you ever find yourself trying
    to copy code from a base class and paste it into a specialized class, you
    are doing it wrong.</para>

    <para>In order to achieve this code isolation, FOF uses a very flexible
    structure for your components. A component's structure looks like
    this:</para>

    <mediaobject>
      <imageobject>
        <imagedata align="center" fileref="images/component-structure.png"
                   scalefit="1" width="14cm"/>
      </imageobject>
    </mediaobject>

    <para>The Dispatcher is the entry point of your component. Some people
    would call this a "front Controller" and this is actually what it is. It's
    different than what we typically call a Controller in the sense that the
    Dispatcher is the only part of your component which is supposed to
    interface the underlying application (e.g. the Joomla! CMS) and gets to
    decide which Controller and task to execute based on the input data
    (usually this is the request data). No matter if you call it an entry
    point, front controller, dispatcher or Clint Eastwood its job is to figure
    out what needs to run and run it. We simply chose the name "Dispatcher"
    because, like all conventions, we had to call it something. So, basically,
    the Dispatcher will take a look at the input data, figure out which
    Controller and task to run, create an instance of it, push it the data and
    tell it to run the task. The Controller is expected to return the rendered
    data or a redirection which the Dispatcher will dully pass back to its
    caller.</para>

    <para>Oh, wait, what is a Controller anyway?! Right below the Dispatcher
    you will see a bunch of stuff grouped as a "triad". The "triad" is
    commonly called "view" (with a lowercase v). Each triad does something
    different in your component. For example, one triad may allow you to
    handle clients, another triad allow you to handle orders and so on. Your
    component can have one or more triads. A triad usually contains a
    Controller, a Model and a View, hence the name ("triad" literally means "a
    bunch of three things"). The only mandatory member is the Controller. A
    triad may be reusing the Model and View from another triad – which is
    another reason why DRY code rocks– or it may even be view-less. So, a
    triad may actually be a bunch of one, two or three things, as long as it
    includes a Controller. Just to stop you from being confused or thinking
    about oriental organised crime and generally make your life easier we
    decided to call these "views" (with a lowercase v) instead of "triads".
    See? Now it is so much better.</para>

    <para>FOF views follow the "fat Model - thin Controller" paradigm. This
    means that the Controller is a generally minimalist piece of code and the
    Model is what gets to do all the work. Knowing this very important bit of
    information, let's take a look at the innards of a view.</para>

    <para>In the very beginning we have the Controller. The Controller has one
    or more tasks. Each task is an action of your component, like showing a
    list of records, showing a single record, publish a record, delete a
    record and so on. With a small difference. The Controller's tasks do not
    perform the actual work. They simply spawn an instance of the Model and
    push it the necessary data it needs. This is called "setting the state" of
    the Model. In most cases the Controller will also call a Model's method
    which does something. It's extremely important to note that the Controller
    will work with any Model that implements that method and that the Model is
    oblivious to the Controller. Then the Controller will create an instance
    of the View class, pass it the instance of the Model and tell it to go
    render itself. It will take the output of the View and pass it back to the
    Dispatcher.</para>

    <para>Which brings us to the Model. The Model is the workhorse of the
    view. It implements the business logic. All FOF Models are passive Models
    which means that they are oblivious to the presence of the Controller and
    View. Actually, they are completely oblivious to the fact that they are
    part of a triad. That's right, Models can be used standalone, outside the
    context of the view or component they are designed to live in. The Model's
    methods will act upon the state variables which have already been set
    (typically, by the Controller) and will only modify the state variables or
    return the output directly. Models must never have to deal with input data
    directly or talk to specific Controllers and/or Views. Models are
    decoupled from everything, that's where their power lies.</para>

    <para>Just a small interlude here. Right below the Model we see a small
    thing called a "Table". This is a strange beast. It's one part data
    adapter, one part model and one part controller, but nothing quite like
    any of this. The Table is used to create an object representing a single
    record. It is typically used to check the validity of a record before
    saving it to the database and post-process a record when reading it from
    the database (e.g. unserialise a field which contains serialised or JSON
    data).</para>

    <para>The final piece of our view is the View class itself. It will ask
    the Model for the raw data and transform it into a suitable
    representation. Typically this means getting the raw records from the
    Model and create the HTML output, but that's not the only use for a View.
    A View could just as well render the data as a JSON stream, a CSV file, or
    even produce a graphic, audio or video file. It's what transforms the raw
    data into something useful, i.e. it's your presentation layer. Most often
    it will do so by loading view templates which are .php files which
    transform raw data to a suitable representation. If you are using the XML
    forms feature of FOF, the View will ask the Model to return the form
    definition and ask FOF's renderer to render this to HTML instead. Even
    though the actual rendering is delegated to the Renderer (not depicted
    above), it's still the View that's responsible for the final leg of the
    rendered data: passing it back to its caller. Yes, the View will actually
    neither output its data directly to the browser, nor talk to the
    underlying application. It returns the raw data back to its caller, which
    is almost always the Controller. Again, we have to stress that the View is
    oblivious to both the Controller and the Model being used. A properly
    written View is fully decoupled from everything else and will work with
    any data provider object implementing the same interface as a Model object
    and a caller which is supposed to capture its output for further
    consumption.</para>

    <important>
      <para>All classes comprising a view are fully decoupled. None is aware
      of the internal workings of another object in the same or a different
      view. This allows you to exchange objects at will, promoting code reuse.
      Even though it sounds like a lot of work it's actually less work and
      pays dividends the more features you get to add to your
      components.</para>
    </important>

    <para>There's another bit mentioned below the triad, the Toolbar. The
    Toolbar is something which conceptually belongs to the component and only
    has to do with views being rendered as HTML. It's what renders the title
    in the back-end, the actions toolbar in the front- or back-end and the
    navigation links / menu in the back-end. In case you missed the subtle
    reference: FOFToolbar allows you to render an actions toolbar even in the
    front-end of your component, something that's not possible with plain old
    Joomla!. You will simply need to add some CSS to do it.</para>

    <para>Finally we mention the Helpers. The Helpers are pure static classes
    implementing every bit of functionality that's neither OOP, nor can it be
    categorised in any other object already mentioned. For example, methods to
    render drop-down selection lists. In so many words, "Helper" is a polite
    way of saying "non-OOP cruft we'd rather not talk about". Keep your
    Helpers to a minimum as they're a royal pain in the rear to test.</para>

    <para>Please do keep in mind that this is just a generic overview of how
    an FOF-based component works. The real power comes from the fact that you
    don't need to know the internal workings of FOF to use it, you don't need
    to copy and paste code from it (woe is the developer who does that) and
    quite possibly you don't even need to write any code. At all. It's all
    discussed later on.</para>

    <section xml:id="fofmodel">
      <title>Models</title>

      <para>The Model is the workhorse. Business logic goes here. Models never
      interface input data directly or output data. They are supposed to read
      data from their state and push the results to their state.</para>

      <bridgehead>Class and file naming conventions</bridgehead>

      <para>The convention for naming the model classes is
      <classname>ComponentModelView</classname>, e.g.
      <classname>TodoModelItems</classname> for a component named
      <code>com_todo</code> and a view named <code>items</code>. The last part
      SHOULD be plural. Support for singular named models (such as
      <classname>TodoModelItem</classname>) will be dropped in a future
      version.</para>

      <para>The model file MUST match the last part of the class name. This
      means that the file for <classname>TodoModelItems</classname> MUST be
      <filename>items.php</filename>, whereas the file for
      <classname>TodoModelItem</classname> MUST be
      <filename>item.php</filename>.</para>

      <para>All Model files are located in your component's
      <filename>models</filename> directories, in the front-end and back-end.
      If a file is not present in the front-end, it will be attempted to be
      loaded from the back-end and vice versa. If the Model class is not
      loaded and a suitable file cannot be found FOF will fall back to one of
      the following, in this order:</para>

      <orderedlist>
        <listitem>
          <para>The Default model. This is a special model class following the
          naming conventions <classname>ComponentModelDefault</classname>,
          e.g. <classname>TodoModelDefault</classname>, found in the
          <filename>default.php</filename> file inside your models
          directory.</para>
        </listitem>

        <listitem>
          <para>If a default model is not found, FOF will fall back to
          creating a suitably configured instance of
          <classname>FOFModel</classname>, using convention over configuration
          (explained below) to determine what the model object should
          do.</para>
        </listitem>
      </orderedlist>

      <bridgehead>Database table naming conventions</bridgehead>

      <para>All FOF models connect, by default, to a database table. You can
      of course have a model whose corresponding table doesn't exist as long
      as you do not use its default data processing methods.</para>

      <para>Database tables are named as
      <database>#__component_view</database>, e.g.
      <database>#__todo_items</database> for a component named
      <code>com_todo</code> and a view named <code>items</code>.</para>

      <para>The auto increment field is named
      <database>component_view_id</database>, e.g.
      <database>todo_item_id</database> for a component named
      <code>com_todo</code> and a view named <code>items</code>. If your table
      does not have an auto incrementing field you will not be able to use the
      default implementation of FOF's data processing methods.</para>

      <para>You can override defaults without copying &amp; pasting code,
      ever. This is documented in Configuring MVC.</para>

      <bridgehead>Model behaviours</bridgehead>

      <para>Models can implement complex, reusable functionality using
      behaviours. Behaviours use the Observable pattern to "hook" into the
      onBefore*/onAfter* methods of the Model object to implement a feature,
      e.g. automatic application of filters based on input parameters. The
      bundled behaviour classes are currently located inside FOF's
      <filename>model/behavior</filename> directory. By default, only the
      <filename>filters</filename> behaviour is being loaded. You can add /
      modify behaviours in different ways:</para>

      <itemizedlist>
        <listitem>
          <para>By overriding the model's __construct method and using the
          addBehavior() method</para>
        </listitem>

        <listitem>
          <para>With the $config or fof.xml configuration overrides, using the
          behaviors option key</para>
        </listitem>
      </itemizedlist>

      <para>Please note that in both cases you are providing the last part of
      the behaviour's name. FOF will look for a view-specific behaviour class
      and if it doesn't it will try falling back to its default implementation
      of the behaviour.</para>

      <para>The convention for naming the view-specific model behaviour
      classes is <classname>ComponentModelViewBehaviorName</classname>, e.g.
      <classname>TodoModelItemsBehaviorFilter</classname> for a component
      named <code>com_todo</code>, a view named <code>items</code> and a
      behaviour called <code>filters</code>. The View part MUST be
      plural.</para>

      <para>If the view-specific model behaviour class is not found, FOF will
      fall back to <classname>FOFModelBehaviorName</classname>, e.g.
      <classname>FOFModelBehaviorFilter</classname> if you are using the
      "filters" behaviour name. The built-in behaviours are discussed further
      down in the Built-in Behaviours section.</para>

      <bridgehead>Customising a specialised class</bridgehead>

      <para>Unlike plain old Joomla! you are NOT supposed to copy and paste
      code when dealing with FOF. Our rule of thumb is that if you ever find
      yourself copying code from FOFModel into your extension's specialised
      model class you're doing it wrong.</para>

      <para>FOF models can be customised very easily using the
      <methodname>onBefore<replaceable>Something</replaceable></methodname> /
      <methodname>onAfter<replaceable>Something</replaceable></methodname>
      methods. The <replaceable>Something</replaceable> is the name of the
      model method they are related to. For example,
      <methodname>onBeforeSave</methodname> runs before the
      <methodname>save()</methodname> method executes its actions and
      <methodname>onAfterSave</methodname> runs right after the
      <methodname>save()</methodname> method executes its actions. Specific
      implementation notes for each case can be found in the docblocks of each
      event method.</para>

      <bridgehead>Customising using plugin events</bridgehead>

      <para>FOF models are designed to call certain plugin events (of
      "content" plugins) upon certain actions. The events are defined in the
      model's protected properties as follows:</para>

      <variablelist>
        <varlistentry>
          <term>event_before_delete</term>

          <listitem>
            <para>(default: <methodname>onContentBeforeDelete</methodname>) is
            triggered before a record is deleted.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>event_after_delete</term>

          <listitem>
            <para>(default: <methodname>onContentAfterDelete</methodname>) is
            triggered after a record is deleted.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>event_before_save</term>

          <listitem>
            <para>(default: <methodname>onContentBeforeSave</methodname>) is
            triggered before a record is saved.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>event_after_save</term>

          <listitem>
            <para>(default: <methodname>onContentAfterSave</methodname>) is
            triggered after a record is saved.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>event_change_state</term>

          <listitem>
            <para>(default: <methodname>onContentChangeState</methodname>) is
            triggered after a record changes state, i.e. it's published,
            unpublished etc.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>event_clean_cache</term>

          <listitem>
            <para>(default: none; doesn't run) is triggered when FOF is
            cleaning the cache.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>Moreover, if you are using XML forms you will also see the
      <methodname>onContentPrepareForm</methodname> event which runs when the
      form is being pre-processed before rendering.</para>

      <para>These are the same as the standard Joomla! plugin events. This
      ensures that a plugin written for a core Joomla! component can easily be
      extended to handle FOF components as well.</para>

      <para>Whenever Joomla! requires us to pass a context to the plugin
      events we use the conventions
      <parameter><replaceable>component</replaceable>.<replaceable>view</replaceable></parameter>
      e.g. <parameter>com_todo.items</parameter> for a component name
      <code>com_todo</code> and a model for the items
      <code>view</code>.</para>

      <section xml:id="fofmodel-behaviours">
        <title>Built-in Behaviours</title>

        <para>FOF comes with several built-in model behaviours. They are used
        to provide core functionality. By default only the "filters" behaviour
        is attached to a model for performance reasons. In this section we
        will discuss what each behaviour does.</para>

        <para>You can combine multiple behaviours at once.</para>

        <section xml:id="fofmodel-behaviours-access">
          <title>access</title>

          <para>Adding this behaviour to a model object filters the front-end
          output by the viewing access levels the user has access to.</para>

          <important>
            <para>This behaviour REQUIRES the "filters" behaviour. If you have
            not added the "filters" behaviour it will not have any effect on
            browse views. It will, however, work on edit and read
            views.</para>
          </important>
        </section>

        <section xml:id="fofmodel-behaviours-enabled">
          <title>enabled</title>

          <para>Adding this behaviour to a model object filters the front-end
          output to only items which are published (enabled=1).</para>
        </section>

        <section xml:id="fofmodel-behaviours-filters">
          <title>filters</title>

          <important>
            <para>This behaviour only works on browse views.</para>
          </important>

          <para>Adding this behaviour to a model object allows FOF to
          magically apply filters based on the input data. For example, if you
          pass &amp;foobar=1 in the URL, or –more generally speaking– have a
          foobar state variable with a value of 1 then the SQL query used to
          fetch the items list will be filtered by the rows where the foobar
          column is set to 1.</para>

          <para>The filters behaviour is smart enough to recognise the type of
          your table fields and apply the correct type filter each time. There
          are several different filtering methods per field type. Besides the
          default filtering method which is used when you only use a plain
          value in the state variable you can select a different method. To do
          that you need to pass a hash (keyed) array in the state variable
          like this array('method' =&gt; 'between', 'from' =&gt; 1, 'to' =&gt;
          10) or, in URL query format,
          &amp;foobar[method]=between&amp;foobar[from]=1&amp;foobar[to]=10.</para>

          <para>So, let's discuss the available match types per field
          type.</para>

          <bridgehead>Number fields</bridgehead>

          <para>For numeric fields you can use the following filtering
          methods:</para>

          <variablelist>
            <varlistentry>
              <term>exact</term>

              <listitem>
                <para>This is the default method. You can just pass the value
                you want to search. If you want to use the hash array format
                you have the following keys:</para>

                <itemizedlist>
                  <listitem>
                    <para><option>method</option> :
                    <parameter>exact</parameter></para>
                  </listitem>

                  <listitem>
                    <para><option>value</option> : the value you want to
                    search</para>
                  </listitem>
                </itemizedlist>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>partial</term>

              <listitem>
                <para>For numeric fields this is just an alias to
                <code>exact</code>.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>between</term>

              <listitem>
                <para>Returns records whose field value is inside the space
                between two numbers, inclusive. You have the following
                keys:</para>

                <itemizedlist>
                  <listitem>
                    <para><option>method</option> :
                    <parameter>between</parameter></para>
                  </listitem>

                  <listitem>
                    <para><option>from</option> : Left barrier of the number
                    space</para>
                  </listitem>

                  <listitem>
                    <para><option>to</option> : Right barrier of the number
                    space</para>
                  </listitem>
                </itemizedlist>

                <para>For example from=1 and to=10 will search for any value
                between 1 to 10, including 1 and 10.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>outside</term>

              <listitem>
                <para>Returns records whose field value is outside the space
                between two numbers, exclusive. You have the following
                keys:</para>

                <itemizedlist>
                  <listitem>
                    <para><option>method</option> :
                    <parameter>outside</parameter></para>
                  </listitem>

                  <listitem>
                    <para><option>from</option> : Left barrier of the number
                    space</para>
                  </listitem>

                  <listitem>
                    <para><option>to</option> : Right barrier of the number
                    space</para>
                  </listitem>
                </itemizedlist>

                <para>For example from=1 and to=10 will search for any value
                lower than 1 or greater than 10, excluding 1 and 10.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>interval</term>

              <listitem>
                <para>Returns records whose field value is following an
                interval (arithmetical progression)</para>

                <itemizedlist>
                  <listitem>
                    <para><option>method</option> :
                    <parameter>interval</parameter></para>
                  </listitem>

                  <listitem>
                    <para><option>value</option> : The starting value of the
                    interval</para>
                  </listitem>

                  <listitem>
                    <para><option>interval</option> : The interval
                    period</para>
                  </listitem>
                </itemizedlist>

                <para>For example value=5 interval=2 will search for values 5,
                7, 9, 11 and so on.</para>
              </listitem>
            </varlistentry>
          </variablelist>

          <bridgehead>Boolean fields</bridgehead>

          <para>For boolean (tiny integer) fields you can use the following
          methods:</para>

          <variablelist>
            <varlistentry>
              <term>exact</term>

              <listitem>
                <para>This is the default method. You can just pass the value
                you want to search. If you want to use the hash array format
                you have the following keys:</para>

                <itemizedlist>
                  <listitem>
                    <para><option>method</option> :
                    <parameter>exact</parameter></para>
                  </listitem>

                  <listitem>
                    <para><option>value</option> : the value you want to
                    search</para>
                  </listitem>
                </itemizedlist>
              </listitem>
            </varlistentry>
          </variablelist>

          <bridgehead>Text fields</bridgehead>

          <para>For text fields you can use the following methods:</para>

          <variablelist>
            <varlistentry>
              <term>partial</term>

              <listitem>
                <para>This is the default method. You can just pass the value
                you want to search. The records returned have that value
                somewhere in their fields (partial text search). If you want
                to use the hash array format you have the following
                keys:</para>

                <itemizedlist>
                  <listitem>
                    <para><option>method</option> :
                    <parameter>partial</parameter></para>
                  </listitem>

                  <listitem>
                    <para><option>value</option> : the partial phrase you want
                    to search</para>
                  </listitem>
                </itemizedlist>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>exact</term>

              <listitem>
                <para>Performs an exact search. The fields' values must be
                exactly equal to the value you use here. You have the
                following keys:</para>

                <itemizedlist>
                  <listitem>
                    <para><option>method</option> :
                    <parameter>exact</parameter></para>
                  </listitem>

                  <listitem>
                    <para><option>value</option> : the exact phrase you want
                    to search</para>
                  </listitem>
                </itemizedlist>
              </listitem>
            </varlistentry>
          </variablelist>

          <bridgehead>Date fields</bridgehead>

          <para>For date and date/time fields you can use the following
          methods:</para>

          <variablelist>
            <varlistentry>
              <term>exact</term>

              <listitem>
                <para>This is the default method. Performs an exact search.
                The fields' values must be exactly equal to the value you use
                here. You have the following keys:</para>

                <itemizedlist>
                  <listitem>
                    <para><option>method</option> :
                    <parameter>exact</parameter></para>
                  </listitem>

                  <listitem>
                    <para><option>value</option> : the exact phrase you want
                    to search</para>
                  </listitem>
                </itemizedlist>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>partial</term>

              <listitem>
                <para>You can just pass the value you want to search. The
                records returned have that value somewhere in their fields
                (partial text search). If you want to use the hash array
                format you have the following keys:</para>

                <itemizedlist>
                  <listitem>
                    <para><option>method</option> :
                    <parameter>partial</parameter></para>
                  </listitem>

                  <listitem>
                    <para><option>value</option> : the partial phrase you want
                    to search</para>
                  </listitem>
                </itemizedlist>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>between</term>

              <listitem>
                <para>Returns records whose field value is inside the space
                between two dates, inclusive. You have the following
                keys:</para>

                <itemizedlist>
                  <listitem>
                    <para><option>method</option> :
                    <parameter>between</parameter></para>
                  </listitem>

                  <listitem>
                    <para><option>from</option> : Left barrier of the date
                    space</para>
                  </listitem>

                  <listitem>
                    <para><option>to</option> : Right barrier of the date
                    space</para>
                  </listitem>
                </itemizedlist>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>outside</term>

              <listitem>
                <para>Returns records whose field value is outside the space
                between two dates, exclusive. You have the following
                keys:</para>

                <itemizedlist>
                  <listitem>
                    <para><option>method</option> :
                    <parameter>outside</parameter></para>
                  </listitem>

                  <listitem>
                    <para><option>from</option> : Left barrier of the number
                    space</para>
                  </listitem>

                  <listitem>
                    <para><option>to</option> : Right barrier of the number
                    space</para>
                  </listitem>
                </itemizedlist>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>interval</term>

              <listitem>
                <warning>
                  <para>This method currently only works with MySQL.</para>
                </warning>

                <para>Returns records whose field value is following an
                interval (arithmetical progression)</para>

                <itemizedlist>
                  <listitem>
                    <para><option>method</option> :
                    <parameter>interval</parameter></para>
                  </listitem>

                  <listitem>
                    <para><option>value</option> : The starting value of the
                    interval</para>
                  </listitem>

                  <listitem>
                    <para><option>interval</option> : The interval period. The
                    interval can either be a string or an array. As a string
                    it contains a sign (+ to go to the future or - to go to
                    the past), the numeric portion of the interval period and
                    the actual interval (days, months, years, weeks). For
                    example:</para>

                    <para><parameter>+1 month</parameter> to search for values
                    every one month in the future or <parameter>-1
                    month</parameter> to search for values every one month in
                    the past</para>

                    <para>As an array it can look like this array('sign' =&gt;
                    '+', 'value' =&gt; '1', 'unit' =&gt; 'month')</para>
                  </listitem>
                </itemizedlist>
              </listitem>
            </varlistentry>
          </variablelist>
        </section>

        <section xml:id="fofmodel-behaviours-language">
          <title>language</title>

          <para>Adding this behaviour to a model object filters the front-end
          output by language, displaying only the items whose language matches
          the currently enabled front-end language. Obviously this only has an
          effect on multi-lingual sites when the Joomla! language filter
          plugin is enabled.</para>
        </section>

        <section xml:id="fofmodel-behaviours-private">
          <title>private</title>

          <para>Adding this behaviour to a model object filters the front-end
          output by the created_by user, showing only items that have been
          created by the currently logged in user. Items not created by the
          current user will not be displayed.</para>
        </section>
      </section>
    </section>

    <section xml:id="foftable">
      <title>Tables</title>

      <para>Tables are strange beasts. They are part data adapter, part model
      and part controller. Confused? They are used to create an object
      representing a single record of a database table. They're typically used
      to check the validity of a record before saving it to the database and
      post-process a record when reading it from the database (e.g.
      unserialise a field which contains serialised or JSON data). They can
      come in very handy to perform automated ("magic") actions when creating
      / modifying / loading a database record.</para>

      <bridgehead>Class and file naming conventions</bridgehead>

      <para>The conventions for naming the table classes is
      <classname>ComponentTableView</classname>, e.g.
      <classname>TodoTableItem</classname> for a component named
      <code>com_todo</code> and a view named <code>items</code>. The last part
      MUST be singular. It's logical: a table class operates on a single
      record, ergo it's singular.</para>

      <para>The table file MUST match the last part of the class name. This
      means that the file for <classname>TodoTableItem</classname> MUST be
      <filename>item.php</filename>.</para>

      <para>All Table files are located in your component's
      <filename>tables</filename> directories in the back-end. If the Table
      class is not loaded and a suitable file cannot be found FOF will fall
      back to creating a suitable configure instance of FOFTable, using
      convention over configuration (explained below) to determine what the
      table object should do.</para>

      <bridgehead>Database table naming conventions</bridgehead>

      <para>It's exactly as described in the Model reference.</para>

      <bridgehead>Magic fields</bridgehead>

      <para>Magic fields have special meaning for FOF. They are:</para>

      <variablelist>
        <varlistentry>
          <term>title</term>

          <listitem>
            <para>The title of an item. It's used for creating a slug.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>slug</term>

          <listitem>
            <para>That's the alias of an item, typically used as part of
            generated URLs by your components. By default, it will be
            generated out of the title using a very basic transliteration
            algorithm.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>enabled</term>

          <listitem>
            <para>Is this record published or not? It's like the published
            column in core Joomla! components, but usually it is only supposed
            to take values of 0 (disabled) and 1 (enabled).</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>ordering</term>

          <listitem>
            <para>The sort order of the record.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>created_by</term>

          <listitem>
            <para>The ID of the user who created the record. Handled
            automatically by FOF.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>created_on</term>

          <listitem>
            <para>The date when the record was created. Handled automatically
            by FOF.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>modified_by</term>

          <listitem>
            <para>The ID of the user who last modified the record. Handled
            automatically by FOF.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>modified_on</term>

          <listitem>
            <para>The date when the record was last modified. Handled
            automatically by FOF.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>locked_by</term>

          <listitem>
            <para>The ID of the user who locked (checked out) the record for
            editing. Handled automatically by FOF.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>locked_on</term>

          <listitem>
            <para>The date when the record was locked (checked out) for
            editing. Handled automatically by FOF.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>hits</term>

          <listitem>
            <para>How many read hits this record has received. Handled
            automatically by FOF.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>asset_id</term>

          <listitem>
            <para>The ID in the #__assets table for the record. Handled
            automatically by FOF. Only required if you want per item ACL
            privileges.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>access</term>

          <listitem>
            <para>Viewing access level</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>You can always customise the magic fields' names in your Table
      class using the <property>_columnAlias</property> array property. For
      example, if your column is named <database>published</database> instead
      of <database>enabled</database>:</para>

      <programlisting>$this-&gt;_columnAlias['enabled'] = 'published';
</programlisting>

      <para>Now FOF will know that the <database>published</database> column
      contains the publish status of the record. This comes in handy when
      you're upgrading a component from POJ (plain old Joomla!) to FOF.</para>

      <bridgehead>Customising a specialised class</bridgehead>

      <para>Unlike plain old Joomla! you are NOT supposed to copy and paste
      code when dealing with FOF. Our rule of thumb is that if you ever find
      yourself copying code from <classname>FOFTable</classname> into your
      extension's specialised table class you're doing it wrong.</para>

      <para>FOF tables can be customised very easily using the
      <methodname>onBefore<replaceable>Something</replaceable></methodname> /
      <methodname>onAfter<replaceable>Something</replaceable></methodname>
      methods. The <replaceable>Something</replaceable> is the name of the
      table method they are related to. For example,
      <methodname>onBeforeBind</methodname> runs before the
      <methodname>bind()</methodname> method executes its actions and
      <methodname>onAfterBind</methodname> runs right after the
      <methodname>bind()</methodname> method executes its actions. Specific
      implementation notes for each case can be found in the docblocks of each
      event method.</para>

      <bridgehead>Customising using plugins</bridgehead>

      <para>You can customise the actions of tables by using standard
      "<filename>system</filename>" plugins. <classname>FOFTable</classname>
      will automatically create plugin events using a fixed naming prefix and
      appending them with the last part of the table's name. For example, if
      you have a table called <classname>TodoTableItem</classname> FOF will
      attempt to run a system plugin event called
      <methodname>onBeforeBindItem</methodname>. For the sake of documentation
      we will be using the suffix <replaceable>TABLENAME</replaceable>.</para>

      <para>The obvious drawback is the possibility of naming clashes. For
      example, given two tables <classname>TodoTableItem</classname> and
      <classname>ContactusTableItem</classname> the event to be called before
      binding data to either table is called
      <methodname>onBeforeBindItem</methodname>. How can you distinguish
      between the two cases? The first parameter passed to the plugin event
      handler is a reference to the table object itself, by convention called
      <parameter>$table</parameter>. You can do a
      <code>$table-&gt;getTableName()</code> which returns something like
      <code>#__todo_items</code>. Just check if it's the database table you
      expect to be interacting with. If not, just return true to let FOF do
      its thing uninterrupted.</para>

      <para>The complete list of events is:</para>

      <variablelist>
        <varlistentry>
          <term>onBeforeBind<replaceable>TABLENAME</replaceable></term>

          <listitem>
            <para>is triggered before binding data from an array/object to the
            table object.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>onAfterLoad<replaceable>TABLENAME</replaceable></term>

          <listitem>
            <para>is triggered after a record is loaded</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>onBeforeStore<replaceable>TABLENAME</replaceable></term>

          <listitem>
            <para>is triggered before a record is saved to the table</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>onAfterStore<replaceable>TABLENAME</replaceable></term>

          <listitem>
            <para>is triggered after a record has been saved to the
            table</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>onBeforeMove<replaceable>TABLENAME</replaceable></term>

          <listitem>
            <para>is triggered before a single record is moved
            (reordered)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>onAfterMove<replaceable>TABLENAME</replaceable></term>

          <listitem>
            <para>is triggered before a single record is moved
            (reordered)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>onBeforeReorder<replaceable>TABLENAME</replaceable></term>

          <listitem>
            <para>is triggered before a new ordering is applied to multiple
            records of the table</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>onAfterReorder<replaceable>TABLENAME</replaceable></term>

          <listitem>
            <para>is triggered before a new ordering is applied to multiple
            records of the table</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>onBeforeDelete<replaceable>TABLENAME</replaceable></term>

          <listitem>
            <para>is triggered before a record is deleted</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>onAfterDelete<replaceable>TABLENAME</replaceable></term>

          <listitem>
            <para>is triggered after a record has been deleted</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>onBeforeHit<replaceable>TABLENAME</replaceable></term>

          <listitem>
            <para>is triggered before registering a read hit on a
            record</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>onAfterHit<replaceable>TABLENAME</replaceable></term>

          <listitem>
            <para>is triggered after registering a read hit on a record</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>onBeforeCopy<replaceable>TABLENAME</replaceable></term>

          <listitem>
            <para>is triggered before copying (duplicating) a record</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>onAfterCopy<replaceable>TABLENAME</replaceable></term>

          <listitem>
            <para>is triggered after copying (duplicating) a record</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>onBeforePublish<replaceable>TABLENAME</replaceable></term>

          <listitem>
            <para>is triggered before publishing a record</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>onAfterReset<replaceable>TABLENAME</replaceable></term>

          <listitem>
            <para>is triggered after we have reset the table object's
            state</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>onBeforeReset<replaceable>TABLENAME</replaceable></term>

          <listitem>
            <para>is triggered before resetting the table object's
            state</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>If you return boolean false from an
      <methodname>onBefore</methodname> event the operation is
      cancelled.</para>

      <para>As you can easily understand this is an extremely powerful feature
      as it allows end users and site integrators (of a power user level,
      granted) to modify or extend the behaviour of FOF-powered extensions
      with great ease.</para>
    </section>

    <section xml:id="fofcontroller">
      <title>Controllers</title>

      <para>The Controller is the orchestrator of each view. You can call a
      specific task of the Controller –based on the input variables you pass
      to it– causing it to execute a specific method. The Controller's job is
      to create a Model and View object, set the state of the Model based on
      the request and then either call a Model's method to perform an action
      (e.g. save a record) or pass the View the Model object and tell it to
      render itself.</para>

      <bridgehead>Class and file naming conventions</bridgehead>

      <para>The convention for naming the controller classes is
      <classname>ComponentControllerView</classname>, e.g.
      <classname>TodoControllerItem</classname> for a component named
      <code>com_todo</code> and a view named <code>items</code>. The last part
      SHOULD be singular. Support for plural named controllers (such as
      <classname>TodoControllerItems</classname>) will be dropped in a future
      version.</para>

      <para>The controller file name MUST match the last part of the class
      name. This means that the file for
      <classname>TodoControllerItem</classname> MUST be
      <filename>item.php</filename>, whereas the file for
      <classname>TodoControllerItems</classname> MUST be
      <filename>items.php</filename>.</para>

      <para>All Controller files are located in your component's controllers
      directories, in the front-end and back-end. If a file is not present in
      the front-end, it will be attempted to be loaded from the back-end and
      vice versa. If the Controller class is not loaded and a suitable file
      cannot be found FOF will fall back to one of the following, in this
      order:</para>

      <orderedlist>
        <listitem>
          <para>The Default controller. This is a special controller class
          following the naming conventions
          <classname><replaceable>Component</replaceable>ControllerDefault</classname>,
          e.g. <classname>TodoControllerDefault</classname>, found in the
          <filename>default.php</filename> file inside your
          <filename>controllers</filename> directory.</para>
        </listitem>

        <listitem>
          <para>If a default controller is not found, FOF will fall back to
          creating a suitably configured instance of
          <classname>FOFController</classname>, using convention over
          configuration to determine what the controller object should
          do.</para>
        </listitem>
      </orderedlist>

      <bridgehead>View names and handling by a single controller</bridgehead>

      <para>The convention in FOF is that he view name is plural when you are
      executing the <methodname>browse</methodname> method (which returns
      multiple records) and singular in all other cases. Both views are
      considered to be part of the same triad and are handled by the same
      controller. For example, let's consider a component named
      <code>com_todo</code> and a view called <code>items</code>. The view
      name will be <code>items</code> when you are producing a list of all
      items (<methodname>browse</methodname> task), but <code>item</code> in
      all other cases. Both views will be handled by the
      <classname>TodoControllerItem</classname> class. This is different than
      plain old Joomla!. You do not need a different "list" and "form"
      controller. There's one and only one controller per view.</para>

      <bridgehead>Customising a specialised class</bridgehead>

      <para>Unlike plain old Joomla! you are NOT supposed to copy and paste
      code when dealing with FOF. Our rule of thumb is that if you ever find
      yourself copying code from FOFController into your extension's
      specialised table class you're doing it wrong.</para>

      <para>FOF controller can be customised very easily using the
      <methodname>onBefore<replaceable>Something</replaceable></methodname> /
      <methodname>onAfter<replaceable>Something</replaceable></methodname>
      methods. The <replaceable>Something</replaceable> is the name of the
      controller task they are related to. For example,
      <methodname>onBeforeBrowse</methodname> runs before the
      <methodname>browse</methodname> task executes and
      <methodname>onAfterBrowse</methodname> runs right after the
      <methodname>browse</methodname> task executes. Returning false will
      result in a 403 Forbidden error. Specific implementation notes for each
      case can be found in the docblocks of each event method.</para>

      <bridgehead>Extending your controllers with plugin events</bridgehead>

      <para>As a developer you've probably found yourself in a position like
      this: a component you found does almost what you want. In order to make
      it do exactly what you want you need to change how a controller handles
      a specific task in a specific view. But if you modify the controller
      ("hack core") you have upgrade and maintenance issues. You can make a
      feature request to the developer but you don't know if and when the
      feature will be implemented. If you are the developer of the component
      you are faced with the dilemma: do I let this client down or do I
      implement a feature that doesn't quite fit my extension and will become
      a maintenance burden?</para>

      <para>This is where FOF kicks in. Remember how you can customise a
      specialised class with <methodname>onBefore</methodname> /
      <methodname>onAfter</methodname> methods? Since FOF 2.1.0 you can handle
      these methods not only with a customised class but also with system
      plugin events. System plugins are always loaded early in the Joomla load
      process (as early as the onAfterInitialise call), making them an
      excellent choice for providing component customisation code, without the
      need to over-engineer FOF's handling of Controllers.</para>

      <para>You will need to create a method named
      <methodname>onBefore<replaceable>Component</replaceable>Controller<replaceable>View</replaceable><replaceable>Task</replaceable></methodname>,
      e.g. <methodname>onBeforeFoobarControllerItemsRead</methodname> to
      handle the <methodname>onBefore</methodname> event of
      <code>com_foobar</code>, items <code>view</code>, <code>read</code>
      task. Returning <constant>false</constant> will prevent the task from
      firing. You can do the same for the <methodname>onAfter</methodname>
      event. Do note that plugin events run after the code in your controller
      and not instead of it or before it. The events must be implemented in
      system plugins so that they always get loaded by Joomla! before any
      controller gets the chance to run (remember, HMVC, you may end up
      calling a controller from a module or plugin).</para>

      <para>The signature for these plugins methods is like this:</para>

      <programlisting><methodname>onBefore<replaceable>Component</replaceable>Controller<replaceable>View</replaceable><replaceable>Task</replaceable></methodname> (FOFController &amp;$controller, FOFInput &amp;$input)</programlisting>

      <para>Both parameters are passed by reference, meaning that you can
      modify them from your plugin. There's a caveat: by the time the
      <methodname>onBefore</methodname> plugin event is called the model and
      view instances have already been created with the previously existing
      <classname>FOFInput</classname> instance. If you need to modify the
      model's state you will have to do something like
      <code>$controller-&gt;getThisModel()-&gt;setState('foo', $myNewFooValue)
      </code></para>

      <programlisting><methodname>onAfter<replaceable>Component</replaceable>Controller<replaceable>View</replaceable><replaceable>Task</replaceable></methodname> (FOFController &amp;$controller, FOFInput &amp;$input, &amp;$ret)</programlisting>

      <para>The <parameter>$ret</parameter> parameter contains the return
      value of the task method. It is passed by reference and you can modify
      it from your plugin.</para>
    </section>

    <section xml:id="fofview">
      <title>Views</title>

      <para>The Views are the last wheel of an MVC triad. Their sole purpose
      in life is to render the data in a suitable representation that makes
      sense. Usually this means rendering to HTML but they can also be used to
      render the data as JSON, XML, CSV or even as images, sound and video.
      It's up to you to decide what a "suitable" representation means in the
      context of your application.</para>

      <bridgehead>Class and file naming conventions</bridgehead>

      <para>The convention for naming the view classes is
      <classname><replaceable>Component</replaceable>View<replaceable>Viewname</replaceable></classname>,
      e.g. <classname>TodoViewItem</classname> for a component named
      <code>com_todo</code> and a view named <code>item</code>. The last part
      MUST match the singular/plural name of the specific view you are
      rendering.</para>

      <para>The view file name MUST follow the convention
      <filename>view.<replaceable>format</replaceable>.php</filename>, e.g.
      <filename>view.html.php</filename>. The
      <replaceable>format</replaceable> is the representation format rendered
      by this view class. The most common formats –for which FOF provides
      default implementations– are <option>html</option>,
      <option>json</option> and <option>csv</option>. The format MUST match
      the value of the "format" input variable. If none is specified,
      <option>html</option> will be assumed. Exception: there is a format
      called <option>form</option> which is an HTML rendering and will be
      loaded when the value of the format input variable is set to
      <option>html</option> (or not set at all) as long as there is an XML
      form for this view.</para>

      <para>All View files are located in your component's views directories,
      in the respective front-end and back-end directory, inside the
      respective view subfolder. For example, if you have a component called
      <code>com_todo</code> and a back-end view named <code>items</code> the
      view file for the HTML rendering is
      <filename>administrator/components/com_todo/views/items/view.html.php</filename></para>

      <para>If a file is not present in the front-end, it will be attempted to
      be loaded from the back-end and vice versa. If the View class is not
      loaded and a suitable file cannot be found FOF will fall back to one of
      the following, in this order:</para>

      <orderedlist>
        <listitem>
          <para>The Default view. This is a special controller class following
          the naming conventions
          <classname><replaceable>Component</replaceable>ViewDefault</classname>,
          e.g. <classname>TodoViewDefault</classname>, found in the
          <filename>default/view.<replaceable>format</replaceable>.php</filename>
          file inside your <filename>views</filename> directory.</para>
        </listitem>

        <listitem>
          <para>If a default view is not found, FOF will fall back to creating
          a suitably configured instance of a <classname>FOFView</classname>
          format-specific class, using convention over configuration to
          determine what the model object should do. For example, if the
          current format is <option>html</option> FOF will create an instance
          of <classname>FOFViewHtml</classname>. If there is no suitable class
          found you will get an error as FOF has no idea what to
          render.</para>
        </listitem>
      </orderedlist>

      <bridgehead>View template files and their location</bridgehead>

      <para>FOF uses default names to generate a list or form to edit, these
      names are linked to the task being executed.</para>

      <table>
        <title>View templates' locations</title>

        <tgroup cols="3">
          <colspec align="center"/>

          <thead>
            <row>
              <entry align="center">Task name</entry>

              <entry align="center">Filename</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry align="left"><methodname>browse</methodname></entry>

              <entry><filename>default.php</filename> OR
              <filename>form.default.xml</filename></entry>

              <entry>This is the file that shows the list page</entry>
            </row>

            <row>
              <entry align="left"><methodname>read</methodname></entry>

              <entry><filename>form.php</filename> OR
              <filename>form.form.xml</filename></entry>

              <entry>This is the file that shows the edit page</entry>
            </row>

            <row>
              <entry align="left"><methodname>edit</methodname></entry>

              <entry><filename>item.php</filename> OR
              <filename>form.item.xml</filename></entry>

              <entry>This is the file that shows the data of a single record
              without being able to edit the record</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>The location of the files is also pre-defined and based on the
      view name. This name comes in both singular and plural form where the
      singular name represents the edit page and the plural name represents
      the list page. Let's say our view is called <code>todo</code>, the
      template files can be found in the following location:</para>

      <programlisting>views
|-- todo
 |-- tmpl
     form.php  OR  form.form.xml
     item.php  OR  form.item.xml
|-- todos
 |-- tmpl
     default.php  OR  form.default.xml
</programlisting>

      <bridgehead>Customising a specialised class</bridgehead>

      <para>Unlike plain old Joomla! you are NOT supposed to copy and paste
      code when dealing with FOF. Our rule of thumb is that if you ever find
      yourself copying code from any FOFView class into your extension's
      specialised table class you're doing it wrong.</para>

      <para>FOF controller can be customised very easily using the
      <methodname>on<replaceable>Task</replaceable></methodname> methods. The
      <replaceable>Task</replaceable> here is the name of the controller task
      they are related to. For example, <methodname>onBrowse</methodname> runs
      when rendering the output of a browse task. There is a catch-all method
      called <methodname>onDisplay</methodname> which executes if no suitable
      method is found in the view class. Returning false from these methods
      will result in a <errorcode>403</errorcode>
      <errorcode>Forbidden</errorcode> error.</para>

      <bridgehead>Layouts, sub-templates and template overrides</bridgehead>

      <para>The default filename of the template file to be used can be
      overridden with the <parameter>layout</parameter> input variable. For
      example if you feed an input variable named <code>layout</code> with a
      value of <code>foobar</code> FOF will look for
      <filename>form.foobar.xml</filename> and <filename>foobar.php</filename>
      in the <filename>tmpl</filename> directory.</para>

      <para>You can also specify sub-templates using the
      <parameter>tpl</parameter> parameter when calling the
      <methodname>display()</methodname> method of your view class. By default
      FOF doesn't use it at all. You can only use it with custom controller
      tasks. In this case the tpl (a.k.a. subtemplate) will be appended to the
      layout name with an underscore in between. So for
      <code>layout=foo</code> and <code>tpl=bar</code> FOF will be looking for
      the <filename>foo_bar.php</filename> view template file.</para>

      <para>All view template files are subject to template overrides. The
      view template will first be searched in the
      <filename>templates/<replaceable>template</replaceable>/html/<replaceable>component</replaceable>/<replaceable>view</replaceable></filename>
      directory where <replaceable>template</replaceable> is the name of your
      template, <replaceable>component</replaceable> is the name of your
      component (e.g. <code>com_todo</code>) and
      <replaceable>view</replaceable> is the name of your view. This allows
      end users and site integrators to provide customised renderings suitable
      for their sites.</para>

      <bridgehead>Joomla! version specific overrides</bridgehead>

      <para>It is possible have different view templates per Joomla! version
      or version family. The correct view template is chosen automatically,
      without you writing a single line of code.</para>

      <para>Let's say that you have a browse view with your lovely
      <filename>default.php</filename> view template file. And you want your
      component to work on Joomla! 2.5 and 3.x. Oh, the horror! The markup is
      different for each Joomla! version, Javascript has changed, different
      features are available… Well, no problem! FOF will automatically search
      for view template files (or XML forms) suffixed with the Joomla! version
      family or version number.</para>

      <para>For example, if you're running under Joomla! 2.5, FoF will look
      for <filename>default.j25.php</filename>,
      <filename>default.j2.php</filename> and <filename>default.php</filename>
      in this order. If you're running under Joomla! 3.2, FOF will look for
      <filename>default.j32.php</filename>,
      <filename>default.j3.php</filename> and <filename>default.php</filename>
      in this order. This allows you to have a different view template file
      for each version family of Joomla! without ugly if-blocks and awkward
      code.</para>

      <para>This feature also works with XML forms, e.g. on Joomla! 2.5 a
      browse form will be looked for in
      <filename>form.default.j25.xml</filename>, <filename>form.default.j2.xml
      </filename>and <filename>form.default.xml</filename> in this
      order.</para>

      <bridgehead>Automatic views and web services</bridgehead>

      <para>FOF can automatically render your component's output in JSON and
      CSV formats. You do not have to write any code whatsoever. Just pass on
      an input variable named <code>format</code> with a value of
      <code>json</code> or <code>csv</code> respectively. In the typical case
      where you get the input variables from the request this means appending
      <code>&amp;format=json</code> or <code>&amp;format=csv</code>
      respectively. You can, of course, customise the output of either format
      using view classes if you need to.</para>

      <para>The JSON format can be used to provide web services with
      integrated hypermedia (following the HAL specification). All you need to
      do is to tell <classname>FOFViewJson</classname> to use hypermedia,
      either by setting <code>$this-&gt;useHypermedia = true;</code> in your
      specialised JSON view class or, much easier, using the
      <filename>fof.xml</filename> configuration file.</para>
    </section>

    <section xml:id="fofdispatcher">
      <title>Dispatcher</title>

      <para>The Dispatcher is what handles the request on behalf of your
      component (be it a web request or an HMVC request). Its primary job is
      to decide which controller to create and which task to run. Its
      secondary job is to handle transparent authentication which comes in
      really handy if you want to perform remote requests to your component,
      interacting with access-restricted data or actions (viewing items
      protected behind a login, performing privileged operations such as
      creating / editing / deleting records and so on).</para>

      <bridgehead>Class and file naming conventions</bridgehead>

      <para>The convention for naming the dispatcher classes is
      <classname><replaceable>Component</replaceable>Dispatcher</classname>,
      e.g. <classname>TodoDispatcher</classname> for a component named
      <code>com_todo</code>. The last part MUST be
      <classname>Dispatcher</classname>.</para>

      <para>The controller file name MUST be
      <filename>dispatcher.php</filename>. All Dispatcher files are located in
      your component's main front-end or back-end directories. If a file is
      not present in the front-end, it will be attempted to be loaded from the
      back-end but NOT vice versa. If the Dispatcher class is not loaded and a
      suitable file cannot be found FOF will fall back to creating a suitably
      configured instance of <classname>FOFDispatcher</classname>, using
      convention over configuration to determine what the Dispatcher object
      should do.</para>

      <bridgehead>Customising a specialised class</bridgehead>

      <para>Unlike plain old Joomla! you are NOT supposed to copy and paste
      code when dealing with FOF. Our rule of thumb is that if you ever find
      yourself copying code from FOFDispatcher into your extension's
      specialised table class you're doing it wrong.</para>

      <para>FOF dispatcher can be customised very easily using the
      <methodname>onBeforeDispatch</methodname> /
      <methodname>onAfterDispatch</methodname> methods.
      <methodname>onBeforeDispatch</methodname> runs before the dispatcher
      executes and <methodname>onAfterDispatch</methodname> runs right after
      the dispatcher executes. Returning false will result in a 403 Forbidden
      error. Specific implementation notes for each case can be found in the
      docblocks of each event method.</para>

      <section xml:id="fofdispatcher-transparent-auth">
        <title>Transparent authentication</title>

        <para>Transparent authentication allows FOF to authenticate a user
        using Basic Authentication or URL parameters. This allows you to
        create web services or directly access pages which require a logged in
        users without using Joomla! session cookies.</para>

        <para>The authentication credentials can be provided via two methods:
        Basic Authentication or a URL parameter. The authentication
        credentials can either be a username and password pair transmitted in
        plaintext (not recommended unless you are forcibly using HTTPS with a
        commercially signed SSL certificate) or encrypted. The encrypted
        information uses Time-Based One Time Passwords (TOTP) to allow you to
        communicate the credentials securely, without the burden of public key
        cryptography, while at the same time maintaining an intrinsically very
        narrow window of opportunity. Furthermore, since the effective
        encryption key is modified every few seconds it makes an attack
        against it slightly harder than using regular symmetric AES-128
        cryptography.</para>

        <para>Transparent authentication is enabled by default, but doesn’t
        use TOTP.</para>

        <bridgehead>Setting it up</bridgehead>

        <para>Setting up transparent authentication requires you to modify
        your component’s Dispatcher class, namely its
        <methodname>__construct()</methodname> method, to change the values of
        some protected fields.</para>

        <para>The available fields are:</para>

        <variablelist>
          <varlistentry>
            <term>$_fofAuth_timeStep</term>

            <listitem>
              <para>The time step, in seconds, for the time based one time
              passwords (TOTP) used for encryption. The default value is 6
              seconds. The window of opportunity for an attacker is 2x-3x as
              much, i.e. 12-18 seconds using the default value. This is
              adequately high to be practical and too low to allow a realistic
              attack by a hacker.</para>

              <important>
                <para>If you change this option you have to notify the
                consumers of the service to make the same change, otherwise
                your TOTPs will be vastly different and communication will
                fail.</para>
              </important>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>$_fofAuth_Key</term>

            <listitem>
              <para>The Base32 encoded key for TOTP. Please note that this is
              Base32, not Base64. Only required if you’re going to use
              encryption.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>$_fofAuth_Formats</term>

            <listitem>
              <para>Which result formats should be handled by the transparent
              authentication. This is an array, by default <code>array('json',
              'csv', 'xml', 'raw')</code>. We recommend only using non-HTML
              formats in here.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>$_fofAuth_LogoutOnReturn</term>

            <listitem>
              <para>By default it’s true and it means that once the component
              finishes executing, FOF will log out the user it authenticated
              using transparent authentication. This is a precaution against
              someone intercepting and abusing the session cookie Joomla! will
              be sending back to the client, as well as preventing the
              sessions table from filling up.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>$_fofAuth_AuthMethods</term>

            <listitem>
              <para>An array of supported authentication methods. Only use the
              ones that make sense for your application. Avoid using the
              *_Plaintext ones, please. The possible values in the array
              are:</para>

              <itemizedlist>
                <listitem>
                  <para><emphasis role="bold">HTTPBasicAuth_TOTP</emphasis>
                  HTTP Basic Authentication using encrypted information
                  protected with a TOTP (the username must be
                  "_fof_auth")</para>
                </listitem>

                <listitem>
                  <para><emphasis role="bold">QueryString_TOTP</emphasis>
                  Encrypted information protected with a TOTP passed in the
                  <parameter>_fofauthentication</parameter> query string
                  parameter</para>
                </listitem>

                <listitem>
                  <para><emphasis
                  role="bold">HTTPBasicAuth_Plaintext</emphasis> HTTP Basic
                  Authentication using a username and password pair in plain
                  text</para>
                </listitem>

                <listitem>
                  <para><emphasis role="bold">QueryString_Plaintext
                  Plaintext</emphasis> JSON-encoded username and password pair
                  passed in the <parameter>_fofauthentication</parameter>
                  query string parameter</para>
                </listitem>
              </itemizedlist>
            </listitem>
          </varlistentry>
        </variablelist>

        <para>When you are using the QueryString_TOTP method you can pass your
        authentication information as GET or POST variable called
        <parameter>_fofauthentication</parameter> with the value being the URL
        encoded cryptogram of the authentication credentials (see further
        down).</para>

        <bridgehead>How to get a TOTP key</bridgehead>

        <para>Any Base32 string can be used as a TOTP key as long as it
        expands to exactly 10 characters. If you don’t feel like guessing, you
        can simply do:</para>

        <programlisting>$totp = new FOFEncryptTotp();
$secret = $totp-&gt;generateSecret();
</programlisting>

        <para>You have to share this secret key with all clients wishing to
        connect to your component via a secure channel. This secret key must
        also be set in the <varname>_fofAuth_Key</varname> variable.</para>

        <bridgehead>How to construct and supply an authentication
        set</bridgehead>

        <para>The authentication set is a representation of the username and
        password of the user you want FOF to log in using transparent
        authentication. Its format depends on the authentication
        method.</para>

        <para>Before going into much detail, we should consider an FOF
        authentication key to be a JSON-encoded object containing the keys
        username and password. E.g.:</para>

        <programlisting>{ “username”: “sample_user”, “password”: “$3Cr3+” }
</programlisting>

        <para>This is used with all but one authentication methods. Encryption
        of the FOF authentication key, used with all *_TOTP methods, is
        discussed further down this document.</para>

        <para>If you are using HTTPBasicAuth_Plaintext method, you have to
        supply your username and password using HTTP Basic Authentication. The
        username is the username of the user you want to log in and the
        password is the password of the user you want to log in. This is the
        easiest and most insecure authentication method.</para>

        <para>If you are using the HTTPBasicAuth_TOTP method, you have to
        supply a username of <option>_fof_auth</option> (including the leading
        underscore) and as the password enter the encrypted FOF authentication
        key.</para>

        <para>If you are using the QueryString_Plaintext method you have to
        supply a GET or POST query parameter with a name of
        <parameter>_fofauthentication</parameter> (including the leading
        underscore). Its value must be the URL encoded FOF authentication
        key.</para>

        <para>If you are using the QueryString_TOTP method you have to supply
        a GET or POST query parameter with a name of
        <parameter>_fofauthentication</parameter> (including the leading
        underscore). Its value must be the URL encoded FOF authentication
        key.</para>

        <bridgehead>Encrypting the FOF authentication key</bridgehead>

        <para>Assuming you are doing this from a FOF-powered component, you
        can do something like this:</para>

        <programlisting>$timeStep = 6; // Change this if you have a different value in your Dispatcher
$authKey = json_encode(array(
  'username' =&gt; $username,
  'password' =&gt; $password
));
$totp = new FOFEncryptTotp($timeStep);
$otp = $totp-&gt;getCode($secretKey);
$cryptoKey = hash('sha256', $this-&gt;_fofAuth_Key.$otp);
$aes = new FOFEncryptAes($cryptoKey);
$encryptedAuthKey = $aes-&gt;encryptString($authKey);
</programlisting>

        <para>If you can get your hands on a TOTP and AES-256 implementation
        for your favourite programming language you can use talk to
        FOF-powered components through transparent authentication. Tip: TOTP
        libraries are usually labelled as being Google Authenticator
        libraries. Google Authenticator simply uses TOTP with a temp step of
        30 seconds. Most such libraries are able to change the time step, thus
        possible to use with FOF. In fact, that's how FOF's TOTP library was
        derived.</para>
      </section>
    </section>

    <section xml:id="foftoolbar">
      <title>Toolbar</title>

      <para>The Toolbar is the part of your components which handles the
      display of the component's title and toolbar buttons, as well as the
      toolbar submenu (links or tabs under the toolbar). While usually used in
      the back-end of your site, FOF components can readily render a toolbar
      in the front-end part of the component as well. Do note that you will
      need to provide your own CSS to style the toolbar in the front-end as
      Joomla! templates lack such a styling.</para>

      <bridgehead>Class and file naming conventions</bridgehead>

      <para>The convention for naming the toolbar classes is
      <classname><replaceable>Component</replaceable>Toolbar</classname>, e.g.
      <classname>TodoToolbar</classname> for a component named
      <code>com_todo</code>. The last part MUST be
      <classname>Toolbar</classname>.</para>

      <para>The controller file name MUST be <filename>toolbar.php</filename>.
      All Toolbar files are located in your component's main directory, in the
      front-end and back-end. If a file is not present in the front-end, it
      will be attempted to be loaded from the back-end. If the Toolbar class
      is not loaded and a suitable file cannot be found FOF will fall back to
      creating a suitably configured instance of FOFToolbar, using convention
      over configuration to determine what the controller object should
      do.</para>

      <bridgehead>Customising a specialised class</bridgehead>

      <para>FOF toolbar can be customised very easily using methods following
      one of the following conventions, from most specific to least
      specific:</para>

      <variablelist>
        <varlistentry>
          <term><methodname>on<replaceable>Viewname</replaceable><replaceable>Taskname</replaceable></methodname></term>

          <listitem>
            <para>for example <methodname>onItemsBrowse</methodname>. The name
            consists of the word on in lowercase, followed by camel cased view
            and task names, in this order. When the task is
            <methodname>Browse</methodname> the view name MUST be plural. For
            any other task the view name MUST be singular. For example:
            <methodname>onItemsBrowse</methodname> and
            <methodname>onItemAdd</methodname></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><methodname>on<replaceable>Viewname</replaceable></methodname></term>

          <listitem>
            <para>for example <methodname>onItems</methodname>. The name
            consists of the word on in lowercase, followed by camel cased view
            name.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><methodname>on<replaceable>Taskname</replaceable></methodname></term>

          <listitem>
            <para>for example <methodname>onBrowse</methodname>. The name
            consists of the word on in lowercase, followed by camel cased task
            name.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>The method to be called is selected from the most to the least
      specific. For example, if you have a component named
      <code>com_todo</code> and a view named <code>items</code>, with the task
      browse being called FOF will search for the following method names, in
      this order: <methodname>onItemsBrowse</methodname>,
      <methodname>onItems</methodname>,
      <methodname>onBrowse</methodname></para>

      <para>Please note that any of these methods should only modify the
      toolbar and not perform any other kind of data processing.</para>

      <bridgehead>Customising the link bar</bridgehead>

      <para>The link bar is the area normally displayed right below the
      toolbar in the back-end of the site. It is usually rendered as flat
      links (Joomla! 2.5), a left-hand sidebar (Joomla! 3.0 and later) or tabs
      (when using Akeeba Strapper). The exact rendering depends on the
      template. The interesting thing is how these links are populated,
      described below.</para>

      <bridgehead>Automatically populated link bar</bridgehead>

      <para>FOF will normally look inside your component's views directory and
      look for plural views. These views are automatically added to the link
      bar in alphabetical order. Exception: a view called <code>cpanel</code>
      will always be added to the link bar.</para>

      <para>If you want a view to not be included in the link bar, please
      create a file named <filename>skip.xml</filename> and put it inside its
      directory. FOF will see that and refrain from adding this view to the
      link bar.</para>

      <para>If you want to modify the ordering of a view you have to create or
      modify the <filename>metadata.xml</filename> file inside your view's
      directory. The <code>&lt;foflib&gt;</code> section inside the
      <filename>metadata.xml</filename> file is read by FOF. For
      example:</para>

      <programlisting>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;metadata&gt;
    &lt;foflib&gt;
        &lt;ordering&gt;12&lt;/ordering&gt;
    &lt;/foflib&gt;
    &lt;view title="COM_FOOBAR_VIEW_ITEMS_TITLE"&gt;
        &lt;message&gt;&lt;![CDATA[COM_FOOBAR_VIEW_ITEMS_DESC]]&gt;&lt;/message&gt;
    &lt;/view&gt;
&lt;/metadata&gt;
</programlisting>

      <para>tells FOF that this view should be the 12th link in the link
      bar.</para>

      <para>If you're not using a <filename>metadata.xml</filename> file and
      have a view called <code>cpanel</code> or <code>cpanels</code> then it
      will always be reordered to the top of the link bar list.</para>

      <bridgehead>Fully customised link bar</bridgehead>

      <para>The automatically generated link bar is usually enough, but
      sometimes you want a more complex presentation. For example, you want to
      show different link bars depending on a configuration setting (e.g. a
      "Power user" switch in your component's options), or a drop-down menu.
      To this end, <classname>FOFToolbar</classname> provides the following
      methods.</para>

      <programlisting>public function <methodname>clearLinks</methodname>()</programlisting>

      <para>Removes all links from the link bar, allowing you to start from a
      clean slate.</para>

      <programlisting>public function &amp;<methodname>getLinks</methodname>()</programlisting>

      <para>Returns the raw data for the links in the link bar. We recommend
      against using it as the internal data structure may change in the
      future.</para>

      <programlisting>public function <methodname>appendLink</methodname>($name, $link = null, $active = false, $icon = null, $parent = '')</programlisting>

      <para>Appends a link to the link bar. If you use the last option
      (<varname>$parent</varname>) you are creating a submenu item whose
      parent is the <varname>$parent</varname> item. You reference the parent
      item by its name (i.e. the <varname>$name</varname> parameter you used
      in the parent element). Drop-downs only work in a. Joomla! 3.0 and later
      without any additional requirements; or b. Joomla! 2.5 but only when
      using the optional Akeeba Strapper package which back ports jQuery and
      Bootstrap to Joomla! 2.5 sites.</para>

      <para>In order to use these methods you will have to override the
      <methodname>renderSubmenu</methodname> method in
      <classname>FOFToolbar</classname>.</para>

      <bridgehead>When the link bar is rendered</bridgehead>

      <para>The link bar is rendered in all HTML views, unless you are have an
      input variable named <parameter>tmpl</parameter> with a value of
      <option>component</option>. Typically, this means that you are passing a
      query string parameter <code>&amp;tmpl=component</code> to the URL of
      your component.</para>

      <para>You can force the entire toolbar (and, by extent, the link bar) to
      be displayed or hidden using the <parameter>render_toolbar</parameter>
      input variable. When you set it to 0 the toolbar and link bar will not
      be displayed. When you set it to 1 the toolbar and link bar will be
      displayed (even when you use <code>tmpl=component</code>).</para>
    </section>

    <section xml:id="hmvc">
      <title>HMVC</title>

      <para>Before we say anything else, let's define what HMVC means in the
      context of FOF. The H stands for "Hierarchical". That is to say there's
      a hierarchy of MVC calls. In very simple terms, HMVC allows you to call
      an MVC triad from anywhere else.</para>

      <para>Practical uses:</para>

      <itemizedlist>
        <listitem>
          <para>Showing a component's view inside a module, without having to
          rewrite the model and view logic inside the module.</para>
        </listitem>

        <listitem>
          <para>Allowing a plugin (e.g. a system or content plugin) to use the
          rendered output of a component and inject it to the output of the
          page or send it as an email.</para>
        </listitem>

        <listitem>
          <para>Displaying a view of the same or a different component within
          a component.</para>
        </listitem>
      </itemizedlist>

      <para>The possibilities are endless.</para>

      <bridgehead>How to use it?</bridgehead>

      <para>You already know it, you just didn't realise it. Here's the secret
      sauce:</para>

      <programlisting>FOFDispatcher::getTmpInstance('com_foobar', 'items', array('layout' =&gt; 'fancy'))-&gt;dispatch();
</programlisting>

      <para>You are simply creating an instance of the dispatcher of the
      component you want, telling it which view to render and giving it an
      option configuration array (the last argument in the method call). Then
      you just call the dispatch() method and let it render.</para>

      <para>If you want to get the output in a variable you have to do
      something like this:</para>

      <programlisting>@ob_start();
FOFDispatcher::getTmpInstance('com_foobar', 'items', array('layout' =&gt; 'fancy'))-&gt;dispatch();
$result = ob_end_clean();
</programlisting>

      <para>If you need to pass input variables to the dispatcher you can do
      something like this:</para>

      <programlisting>FOFDispatcher::getTmpInstance('com_foobar', 'items', array('input' =&gt; $input))-&gt;dispatch();
</programlisting>

      <para>where <varname>$input</varname> can be an indexed array, a
      stdClass object or –preferred– a <classname>FOFInput</classname> or
      <classname>JInput</classname> instance. For example:</para>

      <programlisting>$inputvars = array(
    'limit'            =&gt; 10,
    'limitstart'    =&gt; 0,
    'foobar'        =&gt; 'baz'
);
$input = new FOFInput($inputvars);
FOFDispatcher::getTmpInstance('com_foobar', 'items', array('input' =&gt; $input))-&gt;dispatch();
</programlisting>

      <para>And, of course, you can mix and match all of the above ideas to
      something like:</para>

      <programlisting>$inputvars = array(
    'limit'            =&gt; 10,
    'limitstart'    =&gt; 0,
    'format'        =&gt; 'json'
);
$input = new FOFInput($inputvars);
@ob_start();
FOFDispatcher::getTmpInstance('com_foobar', 'items', array('input' =&gt; $input))-&gt;dispatch();
$json = ob_end_clean();
</programlisting>

      <para>See the awesome thing we just did? We got the first 10 items of
      com_foobar in JSON format in the $json variable. Just a side note. This
      example also screws up the document MIME type if you use it in an HTML
      view. Be warned.</para>
    </section>
  </chapter>

  <chapter xml:id="features-reference">
    <title>Features reference</title>

    <section xml:id="configuring-mvc">
      <title>Configuring MVC</title>

      <para>All MVC and associated classes in FOF (Dispatcher, Controller,
      Model, View, Table, Toolbar) come with a default behavior, for example
      where to look for model files, how to handle request data and so on.
      While this is fine most of the times –as long as you follow FOF’s
      conventions– this is not always desirable.</para>

      <para>For example, if you are building a CCK (something like K2) you may
      want to look for view templates in a non-standard directory in order to
      support alternative “themes”. Or, maybe, if you're building a contact
      component you only want to expose the add view to your front-end users
      so that they can file a contact request but not view other people's
      contact requests. You get the idea.</para>

      <para>The traditional approach to development prescribes overriding
      classes, even to the extent of copying and pasting code. If you've ever
      attended one of my presentations you've probably figured that I consider
      copying and pasting code a mortal sin. You may have also figured that,
      like all developers, I am lazy and dislike writing lots of code.
      Naturally, FOF being a RAD tool it provides an elegant solution to this
      problem. The <varname>$config</varname> array and its sibling, the
      <filename>fof.xml</filename> file.</para>

      <section xml:id="config-array">
        <title>The $config array</title>

        <para>You may have observed that FOF’s MVC classes can be passed an
        optional array parameter <varname>$config</varname>. This is a hash
        array with configuration options. It is being passed from the
        Dispatcher to the Controller and from there to the Model, View and
        Table classes. Essentially, this is your view (MVC triad)
        configuration. Setting its options allows you to modify FOF’s internal
        workings without writing code.</para>

        <para>The various possible settings are explained in The configuration
        settings section below.</para>
      </section>

      <section xml:id="fofxml-file">
        <title>The fof.xml file</title>

        <para>The <varname>$config</varname> array is a great idea but has a
        major drawback: you have to create one or several .php files with
        specialized classes to use it. Remember the FOF promise about not
        having to write code unless absolutely necessary? Yep, this doesn’t
        stick very well with that promise. So the <filename>fof.xml</filename>
        file was born in FOF 2.1.</para>

        <para>The <filename>fof.xml</filename> file is a simple XML file
        placed inside your component's back-end directory, e.g.
        <filename>administrator/com_example/fof.xml</filename>. It contains
        configuration overrides for the front-end, back-end and CLI parts of
        your FOF component.</para>

        <bridgehead>A sample fof.xml file</bridgehead>

        <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;fof&gt;
    &lt;!-- Common settings --&gt;
    &lt;common&gt;
        &lt;!-- Table options common to all tables --&gt;
        &lt;table name="*"&gt;
            &lt;field name="locked_by"&gt;checked_out&lt;/field&gt;
            &lt;field name="locked_on"&gt;checked_out_time&lt;/field&gt;
        &lt;/table&gt;
        &lt;!-- Table options for a specific table --&gt;
        &lt;table name="item"&gt;
            &lt;field name="enabled"&gt;published&lt;/field&gt;
        &lt;/table&gt;
    &lt;/common&gt;    

    &lt;!-- Component back-end options --&gt;
    &lt;backend&gt;
        &lt;!-- Dispatcher options --&gt;
        &lt;dispatcher&gt;
            &lt;option name="default_view"&gt;items&lt;/option&gt;
        &lt;/dispatcher&gt;
    &lt;/backend&gt;

    &lt;!-- Component front-end options --&gt;
    &lt;frontend&gt;
        &lt;!-- Dispatcher options --&gt;
        &lt;dispatcher&gt;
            &lt;option name="default_view"&gt;item&lt;/option&gt;
        &lt;/dispatcher&gt;
        &lt;!-- Options common for all views --&gt;
        &lt;view name="*"&gt;
            &lt;!-- Per-task ACL settings. The star task sets the default ACL privileges for all tasks. --&gt;
            &lt;acl&gt;
                &lt;task name="*"&gt;false&lt;/task&gt;
            &lt;/acl&gt;
        &lt;/view&gt;
        &lt;view name="item"&gt;
            &lt;!-- Task mapping --&gt;
            &lt;taskmap&gt;
                &lt;task name="list"&gt;browse&lt;/task&gt;
            &lt;/taskmap&gt;
            &lt;!-- Per-task ACL settings. An empty string removes ACL checks. --&gt;
            &lt;acl&gt;
                &lt;!-- Everyone, including guests, can access dosomething --&gt;
                &lt;task name="dosomething"&gt;&lt;/task&gt;
                &lt;!-- Only people with the core.manage privilege can access the somethingelse task --&gt;
                &lt;task name="somethingelse"&gt;core.manage&lt;/task&gt;
            &lt;/acl&gt;
            &lt;!-- Configuration options for the model and view --&gt;
            &lt;config&gt;
                &lt;option name="behaviors"&gt;filter,access&lt;/option&gt;
            &lt;/config&gt;
        &lt;/view&gt;
    &lt;/frontend&gt;
&lt;/fof&gt;
</programlisting>

        <para>The <filename>fof.xml</filename> file has an
        <code>&lt;fof&gt;</code> root element. Inside it you can have zero or
        one tags called <code>&lt;frontend&gt;</code>,
        <code>&lt;backend&gt;</code> and <code>&lt;cli&gt;</code> which
        configure FOF for front-end, back-end and CLI access respectively. You
        may also have a tag named <code>&lt;common&gt;</code> which defines
        settings applicable for any mode of access. These common settings will
        be overridden by the corresponding settings defined in the
        <code>&lt;frontend&gt;</code>, <code>&lt;backend&gt;</code> and
        <code>&lt;cli&gt;</code>. Please note that the CLI is yet another
        special case: it will mix the common, back-end and CLI settings to
        derive the final configuration. In the other two cases (front- or
        back-end access) only the common and the configuration for this
        specific mode of access will be used.</para>

        <section xml:id="fofxml-dispatcher">
          <title>Dispatcher settings</title>

          <para>You can configure the way the Dispatcher works using the
          <code>&lt;dispatcher&gt;</code> tag. Inside it you can have one or
          more <code>&lt;option&gt;</code> tags. The name attribute defines
          the name of the configuration variable to set, while the tag's
          content defines the value of this configuration variable.</para>

          <para>The available variables are:</para>

          <variablelist>
            <varlistentry>
              <term>default_view</term>

              <listitem>
                <para>Defines the default view to show if none is defined in
                the input data. By default this is cpanel. In the example
                above we set it to items in the back-end and item in the
                front-end.</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </section>

        <section xml:id="fofxml-table">
          <title>Table settings</title>

          <para>The table settings allow you to set up table options, in case
          you do not wish to use the default conventions of FOF. You define
          the table the options apply to using the name attribute of the view
          tag. Please note that this is the name used in the class, not in the
          database. So, if you have a database table named
          <database>#__example_items</database> and your class is named
          <classname>ExampleTableItem</classname> you must use
          <code>name="item"</code> in the <filename>fof.xml</filename>
          file.</para>

          <para>The settings of each table are isolated from the settings of
          every other table, with one notable exception: the star table, i.e.
          <code>name="*"</code>. This is a placeholder table that defines the
          default settings. These settings are applied to all tables. If you
          also have a table tag for a view, the default settings (from the
          star table) and the settings for the particular table are merged
          together. This applies to all settings described below.</para>

          <bridgehead>Field map settings</bridgehead>

          <para>The field map settings allow you to map specific magic field
          names to your table's fields, in case you do not use FOF's
          contentions. It works the same way as adding setting the
          <varname>_columnAlias</varname> array in your specialized Table
          class.</para>

          <para>The field map is enclosed inside the
          <code>&lt;table&gt;</code> tag itself. It consists of one or more
          <code>&lt;field&gt;</code> tags. The name attribute defines the name
          of the magic (FOF convention) field to map, whereas the content of
          the tag defines the name of the field in your database table.</para>
        </section>

        <section xml:id="fofxml-view">
          <title>View settings</title>

          <para>There are several options that are applied per view. In the
          context of the <filename>fof.xml</filename> file, a “view” actually
          refers to an MVC triad, not just the View part of the triad. In so
          many words, the options affect the Controller, Model and View used
          to render this particular component view. You define the view the
          options apply to using the name attribute of the view tag.</para>

          <para>The settings of each view are isolated from the settings of
          every other view, with one notable exception: the star view, i.e.
          <code>name="*"</code>. This is a placeholder view that defines the
          default settings. These settings are applied to all views. If you
          also have a view tag for a view, the default settings (from the star
          view) and the settings for the particular view are merged together.
          This applies to all settings described below.</para>

          <bridgehead>Task map settings</bridgehead>

          <para>The task map settings allow you to map specific tasks to
          specific Controller methods. Other frameworks would call this the
          “routing” feature. It works the same way as adding running
          registerTask in your specialized Controller class.</para>

          <para>The task map is enclosed inside a single
          <code>&lt;taskmap&gt;</code> tag. You can have exactly zero or one
          <code>&lt;taskmap&gt;</code> tags inside each view tag.</para>

          <para>Inside the <code>&lt;taskmap&gt;</code> tag you can have one
          or more <code>&lt;task&gt;</code> tags. The name attribute defines
          the name of the task to map, whereas the content of the tag defines
          the controller’s method which will be called for this task.</para>

          <bridgehead>ACL settings</bridgehead>

          <para>The ACL settings can be used to override or fine-tune the
          access control for each task of the particular view. Even though FOF
          comes with default ACL mappings for its basic tasks, these are not
          always sufficient or appropriate for all situations. Normally this
          is achieved by overriding the onBefore methods in the Controller,
          e.g. <methodname>onBeforeSave</methodname> to set up the ACL checks
          for the save task. You can use the ACL mappings in the
          <filename>fof.xml</filename> instead of such checks. You can even
          use the ACL mapping in <filename>fof.xml</filename> for custom tasks
          for which no onBefore method exists.</para>

          <para>The ACL settings are enclosed inside a single
          <code>&lt;acl&gt;</code> tag. You can have exactly zero or one
          <code>&lt;acl&gt;</code> tags inside each view tag.</para>

          <para>Inside the <code>&lt;acl&gt;</code> tag you can have one or
          more <code>&lt;task&gt;</code> tags. The <code>name</code> attribute
          defines the name of the task to apply the access control, whereas
          the content of the tag defines the Joomla! ACL privilege required to
          access this task. You can use any core ACL privilege or any custom
          ACL privilege defined in your component's
          <filename>access.xml</filename> file. If you leave the content blank
          then no ACL check is performed (the task is always accessible by all
          users). If you use the special value <option>false</option> then the
          ACL privilege is always going to fail, i.e. the task will not be
          accessible by any user.</para>

          <bridgehead>Option settings</bridgehead>

          <para>The configuration options of views and models can be modified
          directly from the view definition of <filename>fof.xml</filename>.
          The configuration settings are enclosed inside a single
          <code>&lt;config&gt;</code> tag. Inside it you can have one or more
          <code>&lt;option&gt;</code> tags. Each tag is equivalent to passing
          a value in the <varname>$config</varname> array. The
          <code>name</code> attribute defines the name of the configuration
          setting you want to modify. The content of the tag is the value of
          this setting. See the Configuration settings section below for more
          information on what each setting is supposed to do.</para>
        </section>
      </section>

      <section xml:id="configuration-settings">
        <title>Configuration settings</title>

        <para>The following settings can be used either in the $config array
        passed to a Dispatcher, Controller, Model or View class or in the
        <filename>fof.xml</filename> file’s <code>&lt;option&gt;</code> tags
        inside the <code>&lt;view&gt;</code> tags.</para>

        <variablelist>
          <varlistentry>
            <term>autoRouting</term>

            <listitem>
              <para>A bit mask which defines the automatic URL routing of
              redirections.</para>

              <para>A value of 1 means that front-end redirections will be put
              through Joomla!’s <code>JRoute::_()</code>.</para>

              <para>A value of 2 means that back-end redirections will be put
              through Joomla!’s <code>JRoute::_()</code>.</para>

              <para>You can combine multiple values by adding them
              together.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>asset_key</term>

            <listitem>
              <para>The key to be used for ACL assets. This is typically in
              the form
              <replaceable>component</replaceable>.<replaceable>view</replaceable>,
              e.g. <option>com_example.item</option> This is only used for
              per-item ACL privileges. If you do not specify an asset key, the
              default
              <replaceable>component</replaceable>.<replaceable>view</replaceable>
              convention will be used instead.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>base_path</term>

            <listitem>
              <para>The base path of the component.</para>

              <itemizedlist>
                <listitem>
                  <para>In <code>$config</code>: Specify the absolute
                  path.</para>
                </listitem>

                <listitem>
                  <para>In <filename>fof.xml</filename>: Specify a path
                  relative to the site’s root.</para>
                </listitem>
              </itemizedlist>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>behaviors</term>

            <listitem>
              <para>Add model behaviours. See the FOFModel documentation for
              more information on behaviours.</para>

              <itemizedlist>
                <listitem>
                  <para>In <code>$config</code>: An array containing the names
                  of model behaviours to add</para>
                </listitem>

                <listitem>
                  <para>In <filename>fof.xml</filename>: A comma separated
                  list with the names of model behaviours to add</para>
                </listitem>
              </itemizedlist>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>cacheableTasks</term>

            <listitem>
              <para>A comma separated list of tasks which support Joomla!’s
              caching.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>cid</term>

            <listitem>
              <para>Define a comma separated list of item IDs to limit the
              view on. Normally this is empty. Only use when you want to limit
              a view to very specific items. Only valid in the
              <filename>fof.xml</filename> file.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>csrf_protection</term>

            <listitem>
              <para>Should we be doing a token check for the tasks of this
              view? The possible values are:</para>

              <itemizedlist>
                <listitem>
                  <para>0 - no token checks are performed</para>
                </listitem>

                <listitem>
                  <para>1 - token checks are always performed</para>
                </listitem>

                <listitem>
                  <para>2 - token checks are always performed in the back-end
                  and in the front-end, but only when the request format is
                  <option>html</option> (default setting)</para>
                </listitem>

                <listitem>
                  <para>3 - token checks are performer only in the
                  back-end</para>
                </listitem>
              </itemizedlist>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>default_task</term>

            <listitem>
              <para>The task to execute if none is defined. The default value
              is <methodname>display</methodname>.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>event_after_delete</term>

            <listitem>
              <para>The content plugin event to trigger after deleting the
              data. Default:
              <methodname>onContentAfterDelete</methodname></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>event_after_save</term>

            <listitem>
              <para>The content plugin event to trigger after saving the data.
              Default: <methodname>onContentAfterSave</methodname></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>event_before_delete</term>

            <listitem>
              <para>The content plugin event to trigger before deleting the
              data. Default:
              <methodname>onContentBeforeDelete</methodname></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>event_before_save</term>

            <listitem>
              <para>The content plugin event to trigger before saving the
              data. Default:
              <methodname>onContentBeforeSave</methodname></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>event_change_state</term>

            <listitem>
              <para>The content plugin event to trigger after changing the
              published state of the data. Default:
              <methodname>onContentChangeState</methodname></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>event_clean_cache</term>

            <listitem>
              <para>The content plugin event to trigger when cleaning cache.
              There is no default value.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>helper_path</term>

            <listitem>
              <para>The path where the View will be looking for helper
              classes. By default it's the helpers directory inside your
              component's directory.</para>

              <itemizedlist>
                <listitem>
                  <para>In <varname>$config</varname>: Specify an absolute
                  path.</para>
                </listitem>

                <listitem>
                  <para>In <filename>fof.xml</filename>: Specify a path
                  relative to the component's directory.</para>
                </listitem>
              </itemizedlist>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>id</term>

            <listitem>
              <para>Define an item ID to limit the view on. Normally this is
              empty. Only use when you want to limit a view to one single
              item. Only valid in the <filename>fof.xml</filename>
              file.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>ignore_request</term>

            <listitem>
              <para>Set to 1 to prevent the Model's
              <methodname>populateState()</methodname> method from running. By
              default the method is empty and does nothing, as the Model is
              supposed to be decoupled from the request information, having
              the Controller push state variables to it.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>layout</term>

            <listitem>
              <para>The default layout to use for this view. This is normally
              determined automatically based on the task currently being
              executed.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>model_path</term>

            <listitem>
              <para>The path where the Controller will be looking for Model
              class files. By default it's the models directory of the
              component's directory.</para>

              <itemizedlist>
                <listitem>
                  <para>In <varname>$config</varname>: Specify an absolute
                  path.</para>
                </listitem>

                <listitem>
                  <para>In <filename>fof.xml</filename>: Specify a path
                  relative to the component's directory.</para>
                </listitem>
              </itemizedlist>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>model_prefix</term>

            <listitem>
              <para>The naming prefix for the Model to be loaded by the
              Controller. The default option is
              <classname><replaceable>Componentname</replaceable>Model</classname>
              where <replaceable>Componentname</replaceable> is the name of
              the component without the <option>com_</option> prefix.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>modelName</term>

            <listitem>
              <para>The name of the Model class to load. Automatically defined
              based on the component and view names.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>searchpath</term>

            <listitem>
              <para>The path where Controller classes will be searched for. By
              default it's the <filename>controllers</filename> directory
              inside your component's directory.</para>

              <itemizedlist>
                <listitem>
                  <para>In <varname>$config</varname>: Specify the absolute
                  path.</para>
                </listitem>

                <listitem>
                  <para>In <filename>fof.xml</filename>: Specify a path
                  relative to the component's root directory.</para>
                </listitem>
              </itemizedlist>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>table_path</term>

            <listitem>
              <para>The path where the Model will be looking for table
              classes. By default it's the tables directory inside your
              component's directory.</para>

              <itemizedlist>
                <listitem>
                  <para>In $config: Specify an absolute path.</para>
                </listitem>

                <listitem>
                  <para>In fof.xml: Specify a path relative to the component's
                  directory.</para>
                </listitem>
              </itemizedlist>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>table</term>

            <listitem>
              <para>Set the name of the table class the Model will use. Please
              note that the the component name is added to this name
              automatically. For example, given a component
              <code>com_example</code> and a table setting of
              <option>foobar</option> the actual table class which will be
              used will be <classname>ExampleTableFoobar</classname>.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>tbl</term>

            <listitem>
              <para>The name of the database table to use in the table class
              of this view. It is in the format of
              <database>#__tablename</database>, e.g.
              <database>#__example_items</database></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>tbl_key</term>

            <listitem>
              <para>The name of the key field of the database table to use in
              the table class of this view. It is in the format of
              component_view_id, e.g. example_item_id.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>template_path</term>

            <listitem>
              <para>The path where the View will be looking for view template
              (.php) or form (.xml) files. By default it's the
              <filename>tmpl</filename> directory inside the current view's
              directory.</para>

              <itemizedlist>
                <listitem>
                  <para>In <varname>$config</varname>: Specify an absolute
                  path.</para>
                </listitem>

                <listitem>
                  <para>In <filename>fof.xml</filename>: Specify a path
                  relative to the component's directory.</para>
                </listitem>
              </itemizedlist>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>use_table_cache</term>

            <listitem>
              <para>By default FOF caches the names of the tables in the
              database and their field definitions in the file
              <filename><replaceable>JPATH_CACHE</replaceable>/fof/cache.php</filename>,
              where JPATH_CACHE is usually the cache directory in the front-
              or back-end of your site respectively. If you've set
              <parameter>Debug System</parameter> to <option>Yes</option> in
              your site's Global Configuration then by default the cache is
              not used.</para>

              <para>You can override this behaviour per view / for all views
              of a component using this parameter. Set to 0 to force the cache
              to never be used or set it to 1 to force the cache to always be
              used (even when your site is in debug mode).</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>view_path</term>

            <listitem>
              <para>The path where the Controller will be looking for View
              class files. By default it's the <filename>views</filename>
              directory inside your component's directory.</para>

              <itemizedlist>
                <listitem>
                  <para>In <varname>$config</varname>: Specify an absolute
                  path.</para>
                </listitem>

                <listitem>
                  <para>In <filename>fof.xml</filename>: Specify a path
                  relative to the component's directory.</para>
                </listitem>
              </itemizedlist>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>viewName</term>

            <listitem>
              <para>The name of the View class to load. Automatically defined
              based on the component and view names.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
    </section>

    <section xml:id="xml-forms">
      <title>XML Forms</title>

      <para>Traditionally, creating view templates involves a .php file where
      PHP and HTML code are intermixed to create the appropriate
      representation of the data to be served to a web browser. While this
      gives maximum flexibility to the developer it is also a drag, requiring
      you to write a lot of repetitive code.</para>

      <para>Joomla! 1.6 and later is providing a solution to this problem, at
      least for edit views: JForm. With it it's possible to create an XML file
      which defines the controls of the form and have JForm render it as
      HTML.</para>

      <para>Pros:</para>

      <itemizedlist>
        <listitem>
          <para>The view templates are easier to read</para>
        </listitem>

        <listitem>
          <para>The HTML generation is abstracted, making it easier to upgrade
          to newer versions of Joomla! using a different HTML structure</para>
        </listitem>
      </itemizedlist>

      <para>Cons:</para>

      <itemizedlist>
        <listitem>
          <para>You need to change your Controllers, Models and Views to cater
          for and display the forms</para>
        </listitem>

        <listitem>
          <para>They only apply to edit views</para>
        </listitem>
      </itemizedlist>

      <para>FOF takes this concept further with the FOFForm package. Not only
      can you create edit views, but you can also create browse (records
      listing) and read (single record display) views out of XML forms.
      Moreover, the forms are handled automatically by the FOF base MVC
      classes without requiring you to write any additional code. If you want
      you can always combine a traditional .php view template with a form file
      for maximum customisation of your view.</para>

      <section xml:id="form-types">
        <title>Form types</title>

        <section xml:id="different-form-types">
          <title>The different form types</title>

          <para>As implied above, there are three types of XML forms available
          in FOF: Browse, Read and Edit. Each one follows slightly different
          conventions and is used in different tasks of each MVC triad. In
          this section we are going to present what each of those types does
          and what is its structure.</para>

          <para>There a few things you should know before we go into more
          details.</para>

          <para>All form files are placed in your view's
          <filename>tmpl</filename> directory, e.g.
          <filename>components/com_example/views/items/tmpl</filename>.</para>

          <para>All form files' names begin with <filename>form.</filename>
          and end with <filename>.xml</filename>. This is required for Joomla!
          to distinguish them from view metadata XML files. The middle part of
          their name follows the same convention as the regular view template
          files, i.e. "default" for browse tasks, "form" for edit tasks and
          "item" for read tasks.</para>

          <para>For example, the browse form for <code>com_example</code>'s
          items view is located in
          <filename>components/com_example/views/items/tmpl/form.default.xml</filename>
          whereas the form for editing a single item is located in
          <filename>components/com_example/views/item/tmpl/form.form.xml</filename></para>
        </section>

        <section xml:id="browse-forms">
          <title>Browse forms</title>

          <para>Browse forms are used to create a records list view. They are
          typically used in the back-end to allow the user to view and
          manipulate a list of records. A typical browse form looks like
          this:</para>

          <programlisting>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;form
    lessfiles="media://com_todo/css/backend.less||media://com_todo/css/backend.css"
    type="browse"
    show_header="1"
    show_filters="1"
    show_pagination="1"
    norows_placeholder="COM_TODO_COMMON_NORECORDS"
&gt;
    &lt;headerset&gt;
        &lt;header name="ordering" type="ordering" sortable="true" tdwidth="1%" /&gt;
        &lt;header name="todo_item_id" type="rowselect" tdwidth="20" /&gt;
        &lt;header name="title" type="fieldsearchable" sortable="true"
            buttons="yes" buttonclass="btn"
        /&gt;
        &lt;header name="due" type="field" sortable="true" tdwidth="12%" /&gt;
        &lt;header name="enabled" type="published" sortable="true" tdwidth="8%" /&gt;
    &lt;/headerset&gt;

    &lt;fieldset name="items"&gt;
        &lt;field name="ordering" type="ordering" labelclass="order"/&gt;

        &lt;field name="todo_item_id" type="selectrow"/&gt;

        &lt;field name="title" type="text"
            show_link="true"
            url="index.php?option=com_todo&amp;amp;view=item&amp;amp;id=[ITEM:ID]"
            class="todoitem"
            empty_replacement="(no title)"
         /&gt;

        &lt;field name="due" type="duedate" /&gt;

        &lt;field name="enabled" type="published"/&gt;
    &lt;/fieldset&gt;
&lt;/form&gt;
</programlisting>

          <para>You MUST have exactly one <code>&lt;headerset&gt;</code> and
          one <code>&lt;fieldset&gt;</code> tag. The <code>name</code>
          attribute of the <code>&lt;fieldset&gt;</code> MUST always be
          <option>items</option>. Extra tags and/or
          <code>&lt;fieldset&gt;</code> tags with different name attributes
          (or no name attributes) will be ignored.</para>

          <section>
            <title>Form attributes</title>

            <para>The enclosing <code>&lt;form&gt;</code> tag MUST have the
            following attributes:</para>

            <variablelist>
              <varlistentry>
                <term>type</term>

                <listitem>
                  <para>It must be always set to <option>browse</option> for
                  FOF to recognise this as a Browse form</para>
                </listitem>
              </varlistentry>
            </variablelist>

            <para>The enclosing &lt;form&gt; tag MAY have one or more of the
            following attributes:</para>

            <variablelist>
              <varlistentry>
                <term>lessfiles</term>

                <listitem>
                  <para>FOF allows you to include LESS files to customise the
                  styling of your components. You can give a comma separated
                  list of LESS files' identifiers (see the "Media files
                  identifiers" section below) to be loaded by FOF. For example
                  <uri>media://com_example/less/backend.less</uri></para>

                  <para>Compiled LESS files are cached in the
                  <filename>media/lib_fof/compiled directory</filename> for
                  efficiency reasons, using a mangled filename for
                  privacy/security reasons. They are not written in your
                  site's cache or adminstrator/cache directory as these
                  directories are not supposed to be web-accessible, whereas
                  the compiled CSS files, by definition, need to be
                  web-accessible.</para>

                  <para>Since LESS files require a lot of memory and time to
                  compile you can also provide an alternative pre-compiled CSS
                  file, separated from your LESS file with two bars. For
                  example:
                  <uri>media://com_example/less/backend.less||media://com_example/css/backend.css</uri></para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>cssfiles</term>

                <listitem>
                  <para>This works in the same manner as the lessfiles
                  directive, but you are only supposed to specify standard CSS
                  files. The CSS files are defined using identifiers, too.
                  <uri>For example:
                  media://com_example/css/backend.css</uri></para>

                  <para>Please note that media file overrides rules are in
                  effect for these CSS files.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>jsfiles</term>

                <listitem>
                  <para>Works the same way as cssfiles, but it's used to load
                  Javascript files. The Javascript files are defined using
                  identifiers, too. For example:
                  <uri>media://com_example/js/backend.js</uri></para>

                  <para>Please note that media file overrides rules are in
                  effect for these Javascript files.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>show_header</term>

                <listitem>
                  <para>Should we display the header section of the browse
                  form? This is the place where the field titles are
                  displayed.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>show_filters</term>

                <listitem>
                  <para>Should we show the filter section of the browse form?
                  On Joomla! 2.5 this is the area below the header where the
                  user can filter the display based on his own criteria. On
                  Joomla! 3.0 and later this area is rendered in the sidebar,
                  at the left hand side of the records list.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>show_pagination</term>

                <listitem>
                  <para>Should we show the pagination results? That's the
                  links to the first, second, third, …, last page and the
                  drop-down for the number of items per page. It is displayed
                  below the list of records.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>norows_placeholder</term>

                <listitem>
                  <para>A translation key displayed instead of a records list
                  when the current view contains no records, e.g. the table is
                  empty or the filters limit display to zero records.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </section>
        </section>

        <section xml:id="read-forms">
          <title>Read forms</title>

          <para>While browse views display a list of records, read forms will
          display just a single record. These are nowhere near as powerful as
          hand-coded PHP-based view templates but can be used to get a quick
          single item output in a snatch when prototyping a component or when
          your data is really simple. A typical read form looks like
          this:</para>

          <programlisting>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;form
    lessfiles="media://com_todo/css/frontend.less||media://com_todo/css/frontend.css"
    type="read"
&gt;
    &lt;fieldset name="a_single_item" class="todo-item-container form-horizontal"&gt;
        &lt;field name="title" type="text"
            label=""
            class="todo-title-field"
            size="50"
         /&gt;

        &lt;field name="due" type="duedate"
            label="COM_TODO_ITEMS_FIELD_DUE"
            labelclass="todo-field"
            size="20"
            default="NOW"
         /&gt;
        &lt;field name="description" type="editor"
            label=""
        /&gt;
    &lt;/fieldset&gt;
&lt;/form&gt;
</programlisting>

          <para>You MUST have at least one <code>&lt;fieldset&gt;</code> tag.
          The name attribute of the <code>&lt;fieldset&gt;</code> is
          indifferent.</para>

          <section>
            <title>Form attributes</title>

            <para>The enclosing <code>&lt;form&gt;</code> tag MUST have the
            following attributes:</para>

            <variablelist>
              <varlistentry>
                <term>type</term>

                <listitem>
                  <para>It must be always set to <option>read</option> for FOF
                  to recognise this as a Read form</para>
                </listitem>
              </varlistentry>
            </variablelist>

            <para>The enclosing &lt;form&gt; tag MAY have one or more of the
            following attributes:</para>

            <variablelist>
              <varlistentry>
                <term>lessfiles</term>

                <listitem>
                  <para>FOF allows you to include LESS files to customise the
                  styling of your components. You can give a comma separated
                  list of LESS files' identifiers (see the "Media files
                  identifiers" section below) to be loaded by FOF. For
                  example:
                  <uri>media://com_example/less/backend.less</uri></para>

                  <para>Compiled LESS files are cached in the
                  <filename>media/lib_fof/compiled</filename> directory for
                  efficiency reasons, using a mangled filename for
                  privacy/security reasons. They are not written in your
                  site's <filename>cache</filename> or
                  <filename>adminstrator/cache</filename> directory as these
                  directories are not supposed to be web-accessible, whereas
                  the compiled CSS files, by definition, need to be
                  web-accessible.</para>

                  <para>Since LESS files require a lot of memory and time to
                  compile you can also provide an alternative pre-compiled CSS
                  file, separated from your LESS file with two bars. For
                  example:
                  <uri>media://com_example/less/backend.less||media://com_example/css/backend.css</uri></para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>cssfiles</term>

                <listitem>
                  <para>This works in the same manner as the
                  <code>lessfiles</code> directive, but you are only supposed
                  to specify standard CSS files. The CSS files are defined
                  using identifiers, too. For example:
                  <uri>media://com_example/css/backend.css</uri></para>

                  <para>Please note that media file overrides rules are in
                  effect for these CSS files.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>jsfiles</term>

                <listitem>
                  <para>Works the same way as <code>cssfiles</code>, but it's
                  used to load Javascript files. The Javascript files are
                  defined using identifiers, too. For example:
                  <uri>media://com_example/js/backend.js</uri></para>

                  <para>Please note that media file overrides rules are in
                  effect for these Javascript files.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </section>
        </section>

        <section xml:id="edit-forms">
          <title>Edit forms</title>

          <para>Edit forms are used to edit a single record. They are
          typically used in the back-end. If you want to use an Edit form in
          the front-end you will need to specialise your Toolbar class to
          render a front-end toolbar in the edit task of this specific view,
          otherwise the form will not be able to be submitted (unless you do
          other tricks, outside the scope of this developers'
          documentation).</para>

          <para>An edit form looks like this:</para>

          <programlisting>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;form
    lessfiles="media://com_todo/css/backend.less||media://com_todo/css/backend.css"
    validate="true"
&gt;
    &lt;fieldset name="basic_configuration"
        label="COM_TODO_ITEMS_GROUP_BASIC"
        description="COM_TODO_ITEMS_GROUP_BASIC_DESC"
        class="span6"
    &gt;
        &lt;field name="title" type="text"
            class="inputbox"
            label="COM_TODO_ITEMS_FIELD_TITLE"
            labelclass="todo-label todo-label-main"
            required="true"
            size="50"
         /&gt;

        &lt;field name="due" type="calendar"
            class="inputbox"
            label="COM_TODO_ITEMS_FIELD_DUE"
            labelclass="todo-label"
            required="true"
            size="20"
            default="NOW"
         /&gt;
        &lt;field name="enabled" type="list" label="JSTATUS"
            labelclass="todo-label"
            description="JFIELD_PUBLISHED_DESC" class="inputbox"
            filter="intval" size="1" default="1"
        &gt;
            &lt;option value="1"&gt;JPUBLISHED&lt;/option&gt;
            &lt;option value="0"&gt;JUNPUBLISHED&lt;/option&gt;
        &lt;/field&gt;
    &lt;/fieldset&gt;
    &lt;fieldset name="description_group"
        label="COM_TODO_ITEMS_GROUP_DESCRIPTION"
        description="COM_TODO_ITEMS_GROUP_DESCRIPTION_DESC"
        class="span6"
    &gt;
        &lt;field name="description" type="editor"
            label=""
            class="inputbox"
            required="false"
            filter="JComponentHelper::filterText" buttons="true"
        /&gt;
    &lt;/fieldset&gt;
&lt;/form&gt;
</programlisting>

          <section>
            <title>Form attributes</title>

            <para>The enclosing <code>&lt;form&gt;</code> tag MAY have one or
            more of the following attributes:</para>

            <variablelist>
              <varlistentry>
                <term>lessfiles</term>

                <listitem>
                  <para>FOF allows you to include LESS files to customise the
                  styling of your components. You can give a comma separated
                  list of LESS files' identifiers (see the "Media files
                  identifiers" section below) to be loaded by FOF. For
                  example:
                  <uri>media://com_example/less/backend.less</uri></para>

                  <para>Compiled LESS files are cached in the
                  <filename>media/lib_fof/compiled</filename> directory for
                  efficiency reasons, using a mangled filename for
                  privacy/security reasons. They are not written in your
                  site's <filename>cache</filename> or
                  <filename>adminstrator/cache</filename> directory as these
                  directories are not supposed to be web-accessible, whereas
                  the compiled CSS files, by definition, need to be
                  web-accessible.</para>

                  <para>Since LESS files require a lot of memory and time to
                  compile you can also provide an alternative pre-compiled CSS
                  file, separated from your LESS file with two bars. For
                  example:
                  <uri>media://com_example/less/backend.less||media://com_example/css/backend.css</uri></para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>cssfiles</term>

                <listitem>
                  <para>This works in the same manner as the
                  <code>lessfiles</code> directive, but you are only supposed
                  to specify standard CSS files. The CSS files are defined
                  using identifiers, too. For example:
                  <uri>media://com_example/css/backend.css</uri></para>

                  <para>Please note that media file overrides rules are in
                  effect for these CSS files.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>jsfiles</term>

                <listitem>
                  <para>Works the same way as <code>cssfiles</code>, but it's
                  used to load Javascript files. The Javascript files are
                  defined using identifiers, too. For example:
                  <uri>media://com_example/js/backend.js</uri></para>

                  <para>Please note that media file overrides rules are in
                  effect for these Javascript files.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>validation</term>

                <listitem>
                  <para>Set it to <option>true</option> to have Joomla! load
                  its unobtrusive Javascript validation script. Please note
                  that FOF does not perform automatic server-side validation
                  checks. This is the responsibility of your specialised Table
                  class and its check() method.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </section>
        </section>

        <section xml:id="formatting-your-forms">
          <title>Formatting your forms</title>

          <para>OK, granted, the automatically rendered forms are a timesaver
          but, by default, they look terrible. This is quite expected. It's
          like comparing a rug churned out by a mechanised production line
          (the automatically rendered form) and a hand-stiched persian rug
          (the hand-coded PHP-based view template). The good news is that,
          unlike rugs, there's some room of improvement with XML forms.</para>

          <para>For starters, the <code>&lt;fieldset&gt;</code>s of Edit and
          Read forms, as well as the fields themselves, can be assigned CSS
          classes and IDs which can help you provide a custom style. Moreover,
          you can mix XML forms and PHP-based view templates to further
          customise the display of your forms.</para>

          <para>In this section we will cover both customisation methods. If
          this doesn't sound enough for your project you can always use
          hand-coded PHP-based view templates, much like how you did since
          Joomla! 1.5.0. It's up to you to decide which method is best for
          your project!</para>

          <section xml:id="format-forms-with-classes">
            <title>Assigning classes and IDs to &lt;fieldset&gt;s</title>

            <para>Each fieldset of a Read and Edit form can have the following
            optional attributes:</para>

            <variablelist>
              <varlistentry>
                <term>class</term>

                <listitem>
                  <para>One or more CSS classes to be applied to the generated
                  <code>&lt;div&gt;</code> element.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>name</term>

                <listitem>
                  <para>The value of this attribute is applied to the id
                  attribute of the generated <code>&lt;div&gt;</code>
                  element.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>label</term>

                <listitem>
                  <para>The value of this attribute is rendered as a level 3
                  heading (<code>&lt;h3&gt;</code>) element at the top of the
                  generated <code>&lt;div&gt;</code> element.</para>
                </listitem>
              </varlistentry>
            </variablelist>

            <para>If you are using Joomla! 3 (which has Bootstrap by default)
            or Joomla! 2.5 together with the optional Akeeba Strapper package
            (which back ports Bootstrap to Joomla! 2.5) you can use
            Bootstrap's classes to create visually interesting interfaces. For
            example, using <code>class="span6 pull-left"</code> will create a
            half-page-wide left floating sidebar out of your field set.</para>
          </section>

          <section xml:id="format-forms-mixing-with-php">
            <title>Mixing XML forms with PHP-based view templates</title>

            <para>Inside your .php view template file you can use
            <code>$this-&gt;getRenderedForm()</code> to return the XML form
            file rendered as HTML. This allows you to customise the layout
            (e.g. adding information before/after the form) while still using
            the XML file to render the actual form.</para>

            <para>To use this approach, simply insert this code in your custom
            .php template file:</para>

            <programlisting>&lt;?php
$viewTemplate = $this-&gt;getRenderedForm();
echo $viewTemplate; 
?&gt;</programlisting>
          </section>
        </section>
      </section>

      <section xml:id="header-fields-reference">
        <title>Header fields type reference</title>

        <section xml:id="how-header-fields-work">
          <title>How header fields work</title>

          <para>A header field has two distinct functions:</para>

          <itemizedlist>
            <listitem>
              <para>It is used to render headers in list views which are used
              to label the columns of the display and optionally allow you to
              sort the table by a specific field</para>
            </listitem>

            <listitem>
              <para>It is used to render filtering widgets (drop-down lists
              and search boxes). In Joomla! 2.5 you can only render filtering
              widgets <emphasis>directly below</emphasis> a header field in a
              list table and you can only have up to as many filtering widgets
              as your fields. In Joomla! 3.x and above the filtering widgets
              are rendered either <emphasis>above</emphasis> the header fields
              (search boxes) or in the left-hand column (drop-down lists). As
              in Joomla! 3.x and above the filters are detached from the
              header fields you can have as many filters as you want, even
              more than the number of fields you are displaying in the filter
              list.</para>
            </listitem>
          </itemizedlist>

          <para>A leader field can render only a header, only a filter or
          both. Most of the header field types render both. Those whose name
          starts with <literal>filter</literal> will only render a filtering
          widget, but not a header field. As a result these header fields will
          only work on Joomla! 3.x and later.</para>
        </section>

        <section xml:id="common-fields-for-all-types">
          <title>Common fields for all types</title>

          <para>For all following fields you can set the following
          attributes:</para>

          <itemizedlist>
            <listitem>
              <para><emphasis role="strong">name</emphasis> The name of the
              header field. This has to match the table field name in the
              model.</para>

              <para>If you want to create a header for a calculated field or
              for a column that doesn't correspond to a table field please use
              a name that doesn't overlap with the name of a column in the
              table. If you want to list a field many times (e.g. display a
              row selection checkbox and the record ID at the same time) you
              will have to use the same <literal>name</literal> in both
              headers, but use a different <literal>id</literal>
              attribute.</para>
            </listitem>

            <listitem>
              <para><emphasis role="strong">type</emphasis> The header type.
              See below for the available field types, as well as the options
              which can be specified in each one of them.</para>
            </listitem>

            <listitem>
              <para><emphasis role="strong">label</emphasis> The language
              string which will be used for the label of the header; this is a
              language string that will be fed to JText::_() for
              translation.</para>
            </listitem>

            <listitem>
              <para><emphasis role="strong">id</emphasis> The
              <literal>id</literal> attribute for this header. Skip it to have
              FOF create one based on the field name.</para>

              <para>If none is provided FOF will automatically create one
              using the convention component_modelname_fieldname_LABEL where
              component is the name of your component, modelname is the name
              of your model (usually equals to the view name) and fieldname is
              the name of the field. For example, for a component com_foobar,
              a view named items and a field named baz we get the language
              string COM_FOOBAR_ITEMS_BAZ_LABEL.</para>
            </listitem>

            <listitem>
              <para><emphasis role="strong">tdwidth</emphasis> The width of
              this column in the list table. You can use percentile or pixel
              units, i.e. <literal>tdwidth="10%"</literal> or
              <literal>tdwidth="120px"</literal></para>
            </listitem>

            <listitem>
              <para><emphasis role="strong">sortable</emphasis> Set to "true"
              if you want to be able to sort the table by this field.</para>
            </listitem>

            <listitem>
              <para><emphasis role="strong">filterclass</emphasis> The CSS
              class for the filtering widget</para>
            </listitem>

            <listitem>
              <para><emphasis role="strong">onchange</emphasis> The Javascript
              code to be executed when the filtering widget's value is
              modified</para>
            </listitem>
          </itemizedlist>

          <section xml:id="additional-attributes-for-search-box-filtering-widgets">
            <title>Additional attributes for search box filtering
            widgets</title>

            <para>The following attributes apply to all header fields
            rendering a search box filtering widget:</para>

            <itemizedlist>
              <listitem>
                <para><emphasis role="strong">searchfieldname</emphasis> The
                name of the field that will be searchable. If omitted it will
                be the same as the <literal>name</literal> attribute.</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">placeholder</emphasis> The
                placeholder text when the field is empty. Useful to explain
                what kind of information this search field is supposed to be
                searching in.</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">size</emphasis> The size (in
                characters) of the search box</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">maxlength</emphasis> The maximum
                length in characters which is allowed to be entered in the
                field</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">buttons</emphasis> Set to true
                (or skip) to show Go and Reset buttons next to the text field.
                Set to "false" to hide those buttons. The user can still press
                Enter to submit the form.</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">buttonclass</emphasis> The CSS
                class of the Go and Reset buttons</para>
              </listitem>
            </itemizedlist>
          </section>

          <section xml:id="additional-attributes-for-drop-down-list-filtering-widgets">
            <title>Additional attributes for drop-down list filtering
            widgets</title>

            <para>This element has <literal>&lt;option&gt;</literal>
            sub-elements defining the available options. Please consult
            Joomla!'s own <literal>list</literal> field type for more
            information.</para>

            <para>Since FOF 2.1.0 we allow you to use a programmatically
            generated data source instead of the hard-coded
            <literal>&lt;option&gt;</literal> tags. This can be used when you
            need your code to generate options based on some configuration
            data, data from the database and so on. You do that by supplying
            the name of a PHP class and a static method on that class which
            returns the data. The data must be returned in an indexed array
            where the key is the key of the drop-down list item and the value
            is the description (translation key or string). You may also use a
            simple array containing indexed arrays by using the
            <literal>source_key</literal> and <literal>source_value</literal>
            attributes.</para>

            <para>The following additional attributes apply to all header
            fields rendering a drop-down list filtering widget.</para>

            <itemizedlist>
              <listitem>
                <para><emphasis role="strong">source_file</emphasis>
                (optional) The PHP file which provides the class and method.
                It is given in the pseudo-URL format e.g.
                <literal>admin://components/com_foobar/helpers/mydata.php</literal>
                or
                <literal>site://components/com_foobar/helpers/mydata.php</literal>
                for a file relative to the administrator or site root
                directory respectively.</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">source_class</emphasis>
                (required) The name of the PHP class to use, e.g.
                <literal>FoobarHelperMydata</literal></para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">source_method</emphasis>
                (required) The static method of the PHP class to use, e.g.
                <literal>getSomeFoobarData</literal></para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">source_key</emphasis> (optional)
                If you are using an array of indexed arrays, this is the key
                of the indexed array that contains the key of the drop-down
                option.</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">source_key</emphasis> (optional)
                If you are using an array of indexed arrays, this is the key
                of the indexed array that contains the value (description) of
                the drop-down option.</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">source_translate</emphasis>
                (optional) By default all values are being translated, i.e.
                fed through JText::_(). If you don't want that, set this
                attribute to "false".</para>
              </listitem>
            </itemizedlist>
          </section>
        </section>

        <section xml:id="field-types">
          <title>Field Types</title>

          <section xml:id="accesslevel">
            <title>accesslevel</title>

            <para>Displays a header field with a viewing access level
            drop-down filtering widget.</para>

            <para>There are no additional attributes to set.</para>
          </section>

          <section xml:id="field">
            <title>field</title>

            <para>Displays a header field, without any filtering
            widget.</para>

            <para>There are no additional attributes to set.</para>
          </section>

          <section xml:id="fielddate">
            <title>fielddate</title>

            <para>Displays a header field with a date selection search box
            filtering widget.</para>

            <para>The additional attributes you can set are:</para>

            <itemizedlist>
              <listitem>
                <para><emphasis role="strong">readonly</emphasis> Set to true
                to make the search box read only</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">disabled</emphasis> Set to true
                to disable the search box (it displays but you can't click on
                it)</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">filter</emphasis> Skip to show
                the date/time as entered. Set to SERVER_UTC to convert a date
                to UTC based on the server timezone. Set to USER_UTC to
                convert a date to UTC based on the user timezone.</para>
              </listitem>
            </itemizedlist>
          </section>

          <section xml:id="fieldsearchable">
            <title>fieldsearchable</title>

            <para>Displays a header field with a search box filtering
            widget.</para>

            <para>There are no additional attributes to set.</para>
          </section>

          <section xml:id="fieldselectable">
            <title>fieldselectable</title>

            <para>Displays a header field with a drop-down list filtering
            widget.</para>

            <para>There are no additional attributes to set.</para>
          </section>

          <section xml:id="fieldsql">
            <title>fieldsql</title>

            <para>Displays a header field with a drop-down list filtering
            widget. The source of the filter values comes from an SQL
            query.</para>

            <para>The additional attributes are:</para>

            <itemizedlist>
              <listitem>
                <para><emphasis role="strong">key_field</emphasis> the table
                field to use as key</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">value_field</emphasis> the table
                field to display as text</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">query</emphasis> the actual SQL
                query to run</para>
              </listitem>
            </itemizedlist>

            <para>We recommend avoiding this field type as the query is
            specific to a particular database server technology. Using the
            <literal>model</literal> or <literal>fieldselectable</literal>
            type with a programmatic data source is strongly
            encouraged.</para>
          </section>

          <section xml:id="filtersearchable">
            <title>filtersearchable</title>

            <para>This is the same as fieldsearchable but no header is
            rendered. Only the filtering widget is rendered. This header field
            type only works on Joomla! 3.x and later.</para>
          </section>

          <section xml:id="filterselectable">
            <title>filterselectable</title>

            <para>This is the same as fieldselectable but no header is
            rendered. Only the filtering widget is rendered. This header field
            type only works on Joomla! 3.x and later.</para>
          </section>

          <section xml:id="filtersql">
            <title>filtersql</title>

            <para>This is the same as fieldsql but no header is rendered. Only
            the filtering widget is rendered. This header field type only
            works on Joomla! 3.x and later.</para>

            <para>The same warning applies to using this field type.</para>
          </section>

          <section xml:id="language">
            <title>language</title>

            <para>Displays a header field with a drop-down list containing the
            languages installed on your site.</para>

            <para>The additional attributes are:</para>

            <itemizedlist>
              <listitem>
                <para><emphasis role="strong">client</emphasis> If set to
                "site" displays a list of installed front-end languages. If
                set to "administrator" displays a list of installed back-end
                languages. Default: site.</para>
              </listitem>
            </itemizedlist>
          </section>

          <section xml:id="model">
            <title>model</title>

            <para>Similar to the fieldselectable header, but gets the options
            from a FOFModel descendant.</para>

            <para>You can set the following attributes on top of those of the
            'fieldselectable' field type's:</para>

            <itemizedlist>
              <listitem>
                <para><emphasis role="strong">model</emphasis> The name of the
                model to use, e.g. FoobarModelItems</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">key_field</emphasis> The name of
                the field in the model's results which is used as the key
                value of the drop-down</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">value_field</emphasis> The name
                of the field in the model's results which is used as the label
                of the drop-down</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">translate</emphasis> Should the
                value field's value be passed through JText::_() before being
                displayed?</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">apply_access</emphasis> Should
                we respect the view access level, if an access field is
                present in the model</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">none</emphasis> The placeholder
                to be shown if the value is not found in the data returned by
                the model. This placeholder goes through JText, so you can use
                a language string if you like.</para>
              </listitem>
            </itemizedlist>

            <para>In order to filter the model you can specify
            <literal>&lt;state&gt;</literal> sub-elements in the
            format:</para>

            <programlisting>
&lt;state key="state_key"&gt;value&lt;/state&gt;
</programlisting>

            <para>Where state_key is the key of a state variable and value is
            its value. For instance, you could have something like:</para>

            <programlisting>
&lt;state key="foobar_category_id"&gt;123&lt;/state&gt;
</programlisting>
          </section>

          <section xml:id="ordering">
            <title>ordering</title>

            <para>Displays a header field which allows reordering of your
            data.</para>

            <para>On Joomla! 2.5 it displays the name of the field followed by
            a disk icon which saves the ordering.</para>

            <para>On Joomla! 3.x and later it displays an "up and down
            triangle" icon. When clicked the AJAX-powered reordering handles
            in the list view become enabled.</para>

            <para>There are no additional attributes.</para>
          </section>

          <section xml:id="published">
            <title>published</title>

            <para>Displays a header field and a drop-down filtering field for
            Published / Unpublished and related publishing options.</para>

            <para>The additional attributes are:</para>

            <itemizedlist>
              <listitem>
                <para><emphasis role="strong">show_published</emphasis> Should
                we show the Published status in the filter? Default:
                true</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">show_unpublished</emphasis>
                Should we show the Unpublished status in the filter? Default:
                true</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">show_archived</emphasis> Should
                we show the Archived status in the filter? Default:
                false</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">show_trash</emphasis> Should we
                show the Trashed status in the filter? Default: false</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">show_all</emphasis> Should we
                show the All status in the filter? Default: false. You
                actually don't need this as no selection results in all
                records, irrespective of their publish state, to be
                displayed.</para>
              </listitem>
            </itemizedlist>
          </section>

          <section xml:id="rowselect">
            <title>rowselect</title>

            <para>Displays a checkbox which, when clicked, automatically
            selects all the row selection checkboxes in the list.</para>

            <para>There are no additional attributes.</para>
          </section>
        </section>
      </section>

      <section xml:id="form-fields-reference">
        <title>Form fields type reference</title>

        <section xml:id="form-common-fields-for-all-types">
          <title>Common fields for all types</title>

          <para>For all following fields you can set the following
          attributes:</para>

          <itemizedlist>
            <listitem>
              <para><emphasis role="strong">name</emphasis> The name of the
              field. This has to match the table field name in the
              model.</para>

              <para>If you want to create a header for a calculated field or
              for a column that doesn't correspond to a table field please use
              a name that doesn't overlap with the name of a column in the
              table. If you want to list a field many times (e.g. display a
              row selection checkbox and the record ID at the same time) you
              will have to use the same <literal>name</literal> in both
              fields, but use a different <literal>id</literal>
              attribute.</para>
            </listitem>

            <listitem>
              <para><emphasis role="strong">type</emphasis> The field type.
              See below for the available field types, as well as the options
              which can be specified in each one of them.</para>
            </listitem>

            <listitem>
              <para><emphasis role="strong">label</emphasis> The language
              string which will be used for the label of the field; this is a
              language string that will be fed to JText::_() for
              translation.</para>
            </listitem>

            <listitem>
              <para><emphasis role="strong">id</emphasis> The
              <literal>id</literal> attribute for this field. Skip it to have
              FOF create one based on the field name.</para>

              <para>If none is provided FOF will automatically create one
              using the convention component_modelname_fieldname_LABEL where
              component is the name of your component, modelname is the name
              of your model (usually equals to the view name) and fieldname is
              the name of the field. For example, for a component com_foobar,
              a view named items and a field named baz we get the language
              string COM_FOOBAR_ITEMS_BAZ_LABEL.</para>
            </listitem>

            <listitem>
              <para><emphasis role="strong">emptylabel</emphasis> Set this to
              1 if you intend to have a field without a label</para>
            </listitem>

            <listitem>
              <para><emphasis role="strong">description</emphasis> The
              language string which will be used for the label of the field;
              this is a language string that will be fed to JText::_() for
              translation.</para>
            </listitem>

            <listitem>
              <para><emphasis role="strong">required</emphasis> Set it to 1,
              yes or true to make this a required field. If you use the form
              validation then the form cannot be submitted unless this value
              is filled in.</para>
            </listitem>
          </itemizedlist>

          <blockquote>
            <important>
              <para>The automatic label and description only apply if you are
              using Akeeba Strapper or if you are using Joomla! 3.0 and later.
              If you are using FOF on plain old Joomla! 2.5 you must provide
              the <literal>label</literal> and <literal>description</literal>
              attributes manually.</para>
            </important>
          </blockquote>
        </section>

        <section xml:id="form-field-types">
          <title>Field types</title>

          <section xml:id="form-accesslevel">
            <title>accesslevel</title>

            <para>This will display a select list with existing Joomla! Access
            Levels.</para>

            <para>You can set the following attributes:</para>

            <itemizedlist>
              <listitem>
                <para><emphasis role="strong">class</emphasis> CSS class
                (default '')</para>
              </listitem>
            </itemizedlist>
          </section>

          <section xml:id="button">
            <title>button</title>

            <para>This will display an input button.</para>

            <para>You can set the following attributes:</para>

            <itemizedlist>
              <listitem>
                <para><emphasis role="strong">class</emphasis> CSS class
                (default '')</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">icon</emphasis> Bootstrap icon
                to add to the button (default '')</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">onclick</emphasis> "onclick"
                attribute to add to the button (default '')</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">text</emphasis> Button text
                value; this is a language string that will be fed to
                JText::_() for translation</para>
              </listitem>
            </itemizedlist>
          </section>

          <section xml:id="cachehandler">
            <title>cachehandler</title>

            <para>This will display a select list with available Joomla! cache
            handlers</para>

            <para>You can set the following attributes:</para>

            <itemizedlist>
              <listitem>
                <para><emphasis role="strong">class</emphasis> CSS class
                (default '')</para>
              </listitem>
            </itemizedlist>
          </section>

          <section xml:id="calendar">
            <title>calendar</title>

            <para>This will display a calendar/date field.</para>

            <para>You can set the following attributes:</para>

            <itemizedlist>
              <listitem>
                <para><emphasis role="strong">class</emphasis> CSS class
                (default '')</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">format</emphasis> (defaults
                '%Y-%m-%d')</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">filter</emphasis> can be one the
                following:</para>

                <itemizedlist>
                  <listitem>
                    <para>SERVER_UTC convert a date to UTC based on the server
                    timezone</para>
                  </listitem>

                  <listitem>
                    <para>USER_UTC convert a date to UTC based on the user
                    timezone</para>
                  </listitem>
                </itemizedlist>
              </listitem>
            </itemizedlist>
          </section>

          <section xml:id="captcha">
            <title>captcha</title>

            <para>This will display a captcha input.</para>

            <para>You can set the following attributes:</para>

            <itemizedlist>
              <listitem>
                <para><emphasis role="strong">plugin</emphasis> The name of
                the CAPTCHA plugin to use. Leave empty to use whatever is the
                default on in the Global Configuration of the Joomla!
                site</para>
              </listitem>
            </itemizedlist>
          </section>

          <section xml:id="checkbox">
            <title>checkbox</title>

            <para>This will display a single checkbox input.</para>

            <para>You can set the following attributes:</para>

            <itemizedlist>
              <listitem>
                <para><emphasis role="strong">class</emphasis> CSS class
                (default '')</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">value</emphasis> the input
                value</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">checked</emphasis> the default
                status for input</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">disabled</emphasis> Is this a
                disabled form element?</para>
              </listitem>
            </itemizedlist>
          </section>

          <section xml:id="components">
            <title>components</title>

            <para>This will display a select with a list of installed Joomla!
            components</para>

            <para>You can set the following attributes:</para>

            <itemizedlist>
              <listitem>
                <para><emphasis role="strong">class</emphasis> CSS class
                (default '')</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">client_ids</emphasis> comma
                separated list of applicable client ids (note: 0 = admin, 1 =
                site)</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">readonly</emphasis> is this a
                read only field?</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">disabled</emphasis> Is this a
                disabled form element?</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">multiple</emphasis> Should we
                allow multiple selections?</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">onchange</emphasis> onchange
                JavaScript event</para>
              </listitem>
            </itemizedlist>
          </section>

          <section xml:id="editor">
            <title>editor</title>

            <para>This will display a WYSIWYG edit area field for content
            creation and formatted HTML display.</para>

            <para>You can set the following attributes:</para>

            <itemizedlist>
              <listitem>
                <para><emphasis role="strong">class</emphasis> CSS class
                (default '')</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">rows</emphasis> How many rows
                the generated <literal>&lt;textarea&gt;</literal> will have,
                typically used when Javascript is disabled on the
                browser</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">cols</emphasis> How many columns
                the generated <literal>&lt;textarea&gt;</literal> will have,
                typically used when Javascript is disabled on the
                browser</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">height</emphasis> The height of
                the editor (default: 250)</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">width</emphasis> The width of
                the editor (default: 100%)</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">asset_field</emphasis> The name
                of the asset_id field in the form (default: asset_id)</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">created_by_field</emphasis> The
                name of the created_by field in the form</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">asset_id</emphasis> The Joomla!
                asset ID for this record. Leave empty to let FOF use the value
                of the asset field defined by asset_field.</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">buttons</emphasis> Which buttons
                should we show (rendered by editor-xtd plugins)? Use 0, false
                or no to show now buttons, otherwise provide a comma separated
                list of button plugin names</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">hide</emphasis> Which buttons
                should we hide? Similar to above.</para>
              </listitem>
            </itemizedlist>
          </section>

          <section xml:id="email">
            <title>email</title>

            <para>This will display a text input which expects a valid e-mail
            address.</para>

            <para>You can set the following attributes:</para>

            <itemizedlist>
              <listitem>
                <para><emphasis role="strong">class</emphasis> CSS class
                (default '')</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">show_link</emphasis> if true put
                a mailto: link around the address (default false)</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">size</emphasis> Size of the text
                input in characters</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">maxlength</emphasis> Maximum
                length of the input in characters</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">readonly</emphasis> Is this a
                read only field?</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">disabled</emphasis> Is this a
                disabled form element?</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">onchange</emphasis> onchange
                Javascript event</para>
              </listitem>
            </itemizedlist>
          </section>

          <section xml:id="groupedlist">
            <title>groupedlist</title>

            <para>This will display a grouped drop down list.</para>

            <para>You can set the following attributes:</para>

            <itemizedlist>
              <listitem>
                <para><emphasis role="strong">class</emphasis> CSS class
                (default '')</para>
              </listitem>
            </itemizedlist>

            <para>This element supports sub-elements organised in
            <literal>&lt;group&gt;</literal> and
            <literal>&lt;option&gt;</literal> tags. For more information
            please consult the documentation of Joomla!'s
            JFormFieldGroupedList element.</para>
          </section>

          <section xml:id="hidden">
            <title>hidden</title>

            <para>This will display a hidden input.</para>

            <para>You can set no attributes other than the common ones.</para>
          </section>

          <section xml:id="image">
            <title>image</title>

            <para>This is an alias for the "media" field type (see
            below).</para>
          </section>

          <section xml:id="imagelist">
            <title>imagelist</title>

            <para>This will display a media selection field showing images
            from a specified folder.</para>

            <para>You can set the following attributes:</para>

            <itemizedlist>
              <listitem>
                <para><emphasis role="strong">class</emphasis> CSS
                class</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">directory</emphasis> folder to
                search the images in</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">style</emphasis> inline
                style</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">width</emphasis> HTML width
                attribute</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">height</emphasis> HTML height
                attribute</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">align</emphasis> HTML align
                attribute</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">rel</emphasis> HTML rel
                attribute</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">title</emphasis> image
                title</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">filter</emphasis> The filtering
                string for filenames to show. Default:
                <literal>\.png$|\.gif$|\.jpg$|\.bmp$|\.ico$|\.jpeg$|\.psd$|\.eps$</literal></para>
              </listitem>
            </itemizedlist>
          </section>

          <section xml:id="integer">
            <title>integer</title>

            <para>This will display a text input which expects a valid integer
            value.</para>

            <para>You can set the following attributes:</para>

            <itemizedlist>
              <listitem>
                <para><emphasis role="strong">class</emphasis> CSS class
                (default '')</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">first</emphasis> Starting
                number</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">last</emphasis> Last number to
                show</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">step</emphasis> Step for
                increasing the numbers</para>
              </listitem>
            </itemizedlist>

            <para>For example, when using first=10, last=20 and step=2 you get
            a list of 10, 12, 14, 16, 18, 20.</para>
          </section>

          <section xml:id="form-language">
            <title>language</title>

            <para>This will display a select input of all available Joomla!
            languages</para>

            <para>You can set the following attributes:</para>

            <itemizedlist>
              <listitem>
                <para><emphasis role="strong">class</emphasis> CSS class
                (default '')</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">client</emphasis> Can take the
                values of 'site' or 'administrator' to show the available
                languages for the front- and back-end respectively.</para>
              </listitem>
            </itemizedlist>
          </section>

          <section xml:id="list">
            <title>list</title>

            <para>This will display a select input of generic options.</para>

            <para><emphasis role="strong">IMPORTANT</emphasis> The following
            attributes apply to all field types that present a drop-down list;
            they all descend from this field type.</para>

            <para>You can set the following attributes:</para>

            <itemizedlist>
              <listitem>
                <para><emphasis role="strong">class</emphasis> CSS class
                (default '')</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">readonly</emphasis> Is this a
                read-only field?</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">disabled</emphasis> Is this a
                disabled form element?</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">multiple</emphasis> Should we
                allow multiple selections?</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">onchange</emphasis> The onChange
                Javascript event</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">url</emphasis> URL template for
                each element (use [ITEM:ID] as a placeholder for the item
                id)</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">show_link</emphasis> if true,
                adds a link around each item based on the "url" attribute
                (default false)</para>
              </listitem>
            </itemizedlist>

            <para>This element has <literal>&lt;option&gt;</literal>
            sub-elements defining the available options. Please consult
            Joomla!'s own element of the same type for more
            information.</para>

            <para>Since FOF 2.1.0 we allow you to use a programmatically
            generated data source instead of the hard-coded
            <literal>&lt;option&gt;</literal> tags. This can be used when you
            need your code to generate options based on some configuration
            data, data from the database and so on. You do that by supplying
            the name of a PHP class and a static method on that class which
            returns the data. The data must be returned in an indexed array
            where the key is the key of the drop-down list item and the value
            is the description (translation key or string). You may also use a
            simple array containing indexed arrays by using the
            <literal>source_key</literal> and <literal>source_value</literal>
            attributes.</para>

            <para>The relevant attributes are:</para>

            <itemizedlist>
              <listitem>
                <para><emphasis role="strong">source_file</emphasis>
                (optional) The PHP file which provides the class and method.
                It is given in the pseudo-URL format e.g.
                <literal>admin://components/com_foobar/helpers/mydata.php</literal>
                or
                <literal>site://components/com_foobar/helpers/mydata.php</literal>
                for a file relative to the administrator or site root
                directory respectively.</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">source_class</emphasis>
                (required) The name of the PHP class to use, e.g.
                <literal>FoobarHelperMydata</literal></para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">source_method</emphasis>
                (required) The static method of the PHP class to use, e.g.
                <literal>getSomeFoobarData</literal></para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">source_key</emphasis> (optional)
                If you are using an array of indexed arrays, this is the key
                of the indexed array that contains the key of the drop-down
                option.</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">source_key</emphasis> (optional)
                If you are using an array of indexed arrays, this is the key
                of the indexed array that contains the value (description) of
                the drop-down option.</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">source_translate</emphasis>
                (optional) By default all values are being translated, i.e.
                fed through JText::_(). If you don't want that, set this
                attribute to "false".</para>
              </listitem>
            </itemizedlist>
          </section>

          <section xml:id="media">
            <title>media</title>

            <para>This will display a media selection field.</para>

            <para>You can set the following attributes:</para>

            <itemizedlist>
              <listitem>
                <para><emphasis role="strong">class</emphasis> CSS
                class</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">style</emphasis> inline
                style</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">width</emphasis> HTML width
                attribute</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">height</emphasis> HTML height
                attribute</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">align</emphasis> HTML align
                attribute</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">rel</emphasis> HTML rel
                attribute</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">title</emphasis> image
                title</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">asset_field</emphasis> The name
                of the asset_id field in the form (default: asset_id)</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">created_by_field</emphasis> The
                name of the created_by field in the form</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">asset_id</emphasis> The Joomla!
                asset ID for this record. Leave empty to let FOF use the value
                of the asset field defined by asset_field.</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">link</emphasis> The link to a
                media management component to use. Skip this to use Joomla!'s
                own com_media (strongly recommended!)</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">size</emphasis> Field size in
                characters</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">onchange</emphasis> The onChange
                Javascript event</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">preview</emphasis> Should we
                show a preview of the selected media file?</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">preview_width</emphasis> Maximum
                width of preview in pixels</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">preview_height</emphasis>
                Maximum height of preview in pixels</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">directory</emphasis> Directory
                to scan for images relative to site's root. Skip to use the
                site's images directory.</para>
              </listitem>
            </itemizedlist>
          </section>

          <section xml:id="form-model">
            <title>model</title>

            <para>Similar to the list field, but gets the options from a
            FOFModel descendant.</para>

            <para>You can set the following attributes on top of those of the
            'list' field type's:</para>

            <itemizedlist>
              <listitem>
                <para><emphasis role="strong">model</emphasis> The name of the
                model to use, e.g. FoobarModelItems</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">key_field</emphasis> The name of
                the field in the model's results which is used as the key
                value of the drop-down</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">value_field</emphasis> The name
                of the field in the model's results which is used as the label
                of the drop-down</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">translate</emphasis> Should the
                value field's value be passed through JText::_() before being
                displayed?</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">apply_access</emphasis> Should
                we respect the view access level, if an access field is
                present in the model</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">none</emphasis> The placeholder
                to be shown if the value is not found in the data returned by
                the model. This placeholder goes through JText, so you can use
                a language string if you like.</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">format</emphasis> See the text
                field type</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">show_link</emphasis> See the
                text field type</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">url</emphasis> See the text
                field type</para>
              </listitem>
            </itemizedlist>

            <para>In order to filter the model you can specify
            <literal>&lt;state&gt;</literal> sub-elements in the
            format:</para>

            <programlisting>
&lt;state key="state_key"&gt;value&lt;/state&gt;
</programlisting>

            <para>Where state_key is the key of a state variable and value is
            its value. For instance, you could have something like:</para>

            <programlisting>
&lt;state key="foobar_category_id"&gt;123&lt;/state&gt;
</programlisting>
          </section>

          <section xml:id="form-ordering">
            <title>ordering</title>

            <para>This will display an ordering field for your list, both in
            traditional Joomla! method and with a new ajax drag'n'drop method.
            We recommend placing this field first on your form, to respect
            Joomla! 3.0 and later's JUI (Joomla! User Interface)
            guidelines.</para>
          </section>

          <section xml:id="password">
            <title>password</title>

            <para>This will display a password input field.</para>

            <para>You can set the following attributes:</para>

            <itemizedlist>
              <listitem>
                <para><emphasis role="strong">class</emphasis> CSS
                class</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">size</emphasis> Size of the
                field in characters</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">maxlength</emphasis> Maximum
                length of the input in characters</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">autocomplete</emphasis> Should
                we allow browser autocomplete of the password field?</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">readonly</emphasis> Is this a
                read only field?</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">disabled</emphasis> Is this a
                disabled form element?</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">strengthmeter</emphasis> Should
                we show a password strength meter?</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">threshold</emphasis> What is the
                minimum password strength we are supposed to accept in order
                to validate the field (default: 66)?</para>
              </listitem>
            </itemizedlist>
          </section>

          <section xml:id="plugins">
            <title>plugins</title>

            <para>This will display a select input with a list of all
            installed Joomla! package.</para>

            <para>You can set the following attributes:</para>

            <itemizedlist>
              <listitem>
                <para><emphasis role="strong">class</emphasis> CSS
                class</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">folder</emphasis> The plugin
                type to load, e.g. "system", "content" and so on.</para>
              </listitem>
            </itemizedlist>

            <para>The list field type's attributes apply as well.</para>
          </section>

          <section xml:id="form-published">
            <title>published</title>

            <para>This will display a status toggle input field (each time you
            click on it it changes the status).</para>

            <para>You can set the following attributes:</para>

            <itemizedlist>
              <listitem>
                <para><emphasis role="strong">show_published</emphasis> if
                true, the "published" status will be included in the toggle
                cycle (default true)</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">show_unpublished</emphasis> if
                true, the "unpublished" status will be included in the toggle
                cycle (default true)</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">show_archived</emphasis> if
                true, the "archived" status will be included in the toggle
                cycle (default false)</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">show_trash</emphasis> if true,
                the "trash" status will be included in the toggle cycle
                (default false)</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">show_all</emphasis> if true, all
                the available status will be included in the toggle cycle
                (default false)</para>
              </listitem>
            </itemizedlist>

            <para>The list field type's attributes apply as well.</para>
          </section>

          <section xml:id="radio">
            <title>radio</title>

            <para>This will display a radio selection input.</para>

            <para>You can set the following attributes:</para>

            <itemizedlist>
              <listitem>
                <para><emphasis role="strong">class</emphasis> CSS
                class</para>
              </listitem>
            </itemizedlist>
          </section>

          <section xml:id="rules">
            <title>rules</title>

            <para>Displays the ACL privileges setup user interface.</para>

            <para>Please consult the documentation of JFormFieldRules for more
            information.</para>
          </section>

          <section xml:id="selectrow">
            <title>selectrow</title>

            <para>Displays a checkbox to select the entire row for toolbar
            button operations such as edit, delete, copy etc.</para>
          </section>

          <section xml:id="sessionhandler">
            <title>sessionhandler</title>

            <para>This will display a Joomla! session handler selection
            input.</para>

            <para>You can set the following attributes:</para>

            <itemizedlist>
              <listitem>
                <para><emphasis role="strong">class</emphasis> CSS
                class</para>
              </listitem>
            </itemizedlist>

            <para>Please refer to Joomla!'s JFormFieldSessionHandler for more
            information.</para>
          </section>

          <section xml:id="spacer">
            <title>spacer</title>

            <para>This will display a spacer (static element) between form
            elements.</para>

            <para>You can set no attributes.</para>
          </section>

          <section xml:id="sql">
            <title>sql</title>

            <para>This will display a select input based on a custom SQL
            query</para>

            <para>You can set the following attributes:</para>

            <itemizedlist>
              <listitem>
                <para><emphasis role="strong">class</emphasis> CSS
                class</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">key_field</emphasis> the table
                field to use as key</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">value_field</emphasis> the table
                field to display as text</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">query</emphasis> the actual SQL
                query to run</para>
              </listitem>
            </itemizedlist>

            <para>We recommend avoiding this field type as the query is
            specific to a particular database server technology. Using the
            <literal>model</literal> or <literal>list</literal> type with a
            programmatic data source is strongly encouraged.</para>
          </section>

          <section xml:id="tel">
            <title>tel</title>

            <para>This will display a text input which expects a valid
            telephone value.</para>

            <para>You can set the following attributes:</para>

            <itemizedlist>
              <listitem>
                <para><emphasis role="strong">class</emphasis> CSS class
                (default '')</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">show_link</emphasis> if true, a
                "tel:" link will be appended around the field value (default
                false)</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">empty_replacement</emphasis> a
                string to show in place of the field when it's empty</para>
              </listitem>
            </itemizedlist>

            <para>The text field type's attributes apply as well.</para>
          </section>

          <section xml:id="text">
            <title>text</title>

            <para>This will display a single line text input.</para>

            <para>You can set the following attributes:</para>

            <itemizedlist>
              <listitem>
                <para><emphasis role="strong">class</emphasis> CSS class
                (default '')</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">url</emphasis> URL template for
                each element (use [ITEM:ID] as a placeholder for the item id).
                This goes through the field tag replacement (see below)</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">show_link</emphasis> if true, a
                "tel:" link will be appended around the field value (default
                false)</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">empty_replacement</emphasis> a
                string to show in place of the field when it's empty</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">size</emphasis> The size of the
                input in characters</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">maxlength</emphasis> The maximum
                acceptable input length in characters</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">readonly</emphasis> Is this a
                read-only field?</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">disabled</emphasis> Is this a
                disabled form field element?</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">format_string</emphasis> A
                string or translation key used to format the text data before
                it is displayed. Uses the format() PHP function's
                syntax.</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">format_if_not_empty</emphasis>
                Should we apply the format string even when the field is
                empty? Default: true</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">parse_value</emphasis> If set to
                true, the value of the field will go through the field tag
                replacement (see below) Default: false</para>
              </listitem>
            </itemizedlist>

            <section xml:id="field-tag-replacement-for-text-fields">
              <title>Field tag replacement for text fields</title>

              <para>You can reference values from other fields inside your
              text. You can do that using the square bracket tag syntax, i.e.
              <literal>[ITEM:fieldname]</literal> is replaced with the value
              of the field <literal>fieldname</literal>. The tag must open
              with a square bracket, followed by the uppercase word ITEM,
              followed by a colon, the field name and closing with a square
              bracket. You must not use spaces in the tag.</para>

              <para>FOF also recognises the special tag
              <literal>[ITEM:ID]</literal>, replacing it with the value of the
              key field of the table.</para>
            </section>
          </section>

          <section xml:id="textarea">
            <title>textarea</title>

            <para>This will display a textarea input.</para>

            <para>You can set the following attributes:</para>

            <itemizedlist>
              <listitem>
                <para><emphasis role="strong">class</emphasis> CSS class
                (default '')</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">disabled</emphasis> Is this
                disabled form element?</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">cols</emphasis> Number of
                columns</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">rows</emphasis> Number of
                rows</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">onchange</emphasis> The onChange
                Javascript event</para>
              </listitem>
            </itemizedlist>
          </section>

          <section xml:id="title">
            <title>title</title>

            <para>This is like a text field. On list views it will display a
            second line containing secondary information, e.g. the alias
            (slug) of the record.</para>

            <para>The following attributes are used on top of the text field's
            attributes:</para>

            <itemizedlist>
              <listitem>
                <para><emphasis role="strong">slug_field</emphasis> The name
                of the field containing the slug or other secondary
                information to display. Default: slug</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">slug_format</emphasis> The
                format string (string or translation key) for the secondary
                information line. Default: (%s)</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">slug_class</emphasis> The CSS
                class of the secondary information line. Default: small</para>
              </listitem>
            </itemizedlist>
          </section>

          <section xml:id="timezone">
            <title>timezone</title>

            <para>This will display a select list with all available
            timezones.</para>

            <para>You can set the following attributes:</para>

            <itemizedlist>
              <listitem>
                <para><emphasis role="strong">class</emphasis> CSS class
                (default '')</para>
              </listitem>
            </itemizedlist>
          </section>

          <section xml:id="url">
            <title>url</title>

            <para>This will display a text input which expects a valid
            URL.</para>

            <para>You can set the following attributes:</para>

            <itemizedlist>
              <listitem>
                <para><emphasis role="strong">class</emphasis> CSS class
                (default '')</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">show_link</emphasis> if true, an
                &lt;a&gt; link will be added around the field value (default
                false)</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">empty_replacement</emphasis> a
                string to show in place of the field when it's empty</para>
              </listitem>
            </itemizedlist>

            <para>The text field type's attributes apply as well.</para>
          </section>

          <section xml:id="user">
            <title>user</title>

            <para>This will display a select list with all available Joomla!
            users.</para>

            <para>You can set the following attributes:</para>

            <itemizedlist>
              <listitem>
                <para><emphasis role="strong">class</emphasis> CSS class
                (default '')</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">show_username</emphasis> if
                true, show the username (default true)</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">show_email</emphasis> if true,
                show the username (default true)</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">show_name</emphasis> if true,
                show the full name (default true)</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">show_id</emphasis> if true, show
                the id (default true)</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">show_link</emphasis> if true,
                add a link around the field value (default false)</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">show_avatar</emphasis> if true,
                show the avatar (user picture). Default false.</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">avatar_size</emphasis> size of
                the image in the avatar (avatars are square, so this is both
                the width and height of the avatar)</para>
              </listitem>

              <listitem>
                <para><emphasis role="strong">avatar_method</emphasis> if set
                to "plugin" use FOF plugins, else fall back to a Gravatar
                based on the user's email address</para>
              </listitem>
            </itemizedlist>
          </section>
        </section>
      </section>
    </section>
  </chapter>

  <appendix xml:id="appendix-definitions">
    <title>Definitions</title>

    <section xml:id="media-file-identifiers">
      <title>Media file identifiers</title>

      <para>FOF expects you to give an abstracted path to your media (CSS,
      Javascript, image, …) files, also called an "identifier". It allows it
      to perform media file overrides very easily, in a fashion similar to how
      Joomla! performs template overrides for view files. This section will
      help you understand how they are used and how media file overrides
      work.</para>

      <para>Media file identifiers are in the form:</para>

      <programlisting>area://path</programlisting>

      <para>Where the <literal>area</literal> can be one of:</para>

      <para><emphasis role="strong">media</emphasis> : The file is searched
      inside your site's <literal>media</literal> directory. FOF will also try
      to locate it in the media overrides directory of your site, e.g.
      <literal>templates/your_template/media</literal> where your_template is
      the name of the currently active template on your site.</para>

      <para>In this case the <literal>path</literal> is the rest of the path
      relative to the media or media override directory. The first part of
      your path SHOULD be your extension's name, e.g. com_example.</para>

      <para>Example: <literal>media://com_example/css/style.css</literal> will
      look for the file
      <literal>templates/your_template/media/com_example/css/style.css</literal>
      or, if it doesn't exist,
      <literal>media/com_example/css/style.css</literal></para>

      <para><emphasis role="strong">admin</emphasis> : The file is searched
      for in the administration section of your extension. The first part of
      the path MUST be your extension's name. The file is first searched for
      in your template override directory.</para>

      <para>Example: <literal>admin://com_example/assets/style.css</literal>
      will look for the file
      <literal>administrator/templates/your_template/com_example/assets/style.css</literal>
      or, if it doesn't exist,
      <literal>administrator/components/com_example/assets/style.css</literal></para>

      <para><emphasis role="strong">site</emphasis> : The file is searched for
      in the front-end section of your extension. The first part of the path
      MUST be your extension's name. The file is first searched for in your
      template override directory.</para>

      <para>Example: <literal>site://com_example/assets/style.css</literal>
      will look for the file
      <literal>templates/your_template/com_example/assets/style.css</literal>
      or, if it doesn't exist,
      <literal>components/com_example/assets/style.css</literal></para>

      <important>
        <para>FOF cannot know what is the other side's template. Let's put it
        simply. If you are in the front-end, your template is called
        "foobar123" and you use the identifier
        <literal>admin://com_example/assets/style.css</literal>, FOF will look
        for the template override in
        <literal>administrator/templates/foobar123/com_example/assets/style.css</literal>.
        Of course this is incorrect, but there is no viable way to know what
        the back-end template in use is from the site's front-end and vice
        versa. As a result, we strongly recommend only using
        <literal>media://</literal> identifiers for media files.</para>

        <para>On top of that there is a security aspect as well. The front-end
        of your component should never try to load media files from the
        back-end of the component. Many web masters choose to conceal the fact
        that they are using Joomla! by means of password protection or
        redirection of the <literal>administrator</literal> directory.</para>
      </important>
    </section>
  </appendix>
</book>
